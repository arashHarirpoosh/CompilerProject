Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ERROR

Grammar

Rule 0     S' -> program
Rule 1     program -> declist MAIN LRB RRB block
Rule 2     declist -> declist dec
Rule 3     declist -> <empty>
Rule 4     dec -> vardec
Rule 5     dec -> funcdec
Rule 6     type -> INTEGER
Rule 7     type -> FLOAT
Rule 8     type -> BOOLEAN
Rule 9     iddec -> ID
Rule 10    iddec -> ID LSB exp RSB
Rule 11    iddec -> ID ASSIGN exp
Rule 12    idlist -> iddec
Rule 13    idlist -> idlist COMMA iddec
Rule 14    vardec -> type idlist SEMICOLON
Rule 15    funcdec -> type ID LRB paramdecs RRB block
Rule 16    funcdec -> VOID ID LRB paramdecs RRB block
Rule 17    paramdecs -> paramdecslist
Rule 18    paramdecs -> <empty>
Rule 19    paramdecslist -> paramdec
Rule 20    paramdecslist -> paramdecslist COMMA paramdec
Rule 21    paramdec -> type ID
Rule 22    paramdec -> type ID LSB RSB
Rule 23    varlist -> vardec varlist
Rule 24    varlist -> <empty>
Rule 25    block -> LCB varlist stmtlist RCB
Rule 26    stmtlist -> stmtlist stmt
Rule 27    stmtlist -> <empty>
Rule 28    lvalue -> ID
Rule 29    lvalue -> ID LSB exp RSB
Rule 30    stmt -> RETURN exp SEMICOLON
Rule 31    stmt -> exp SEMICOLON
Rule 32    stmt -> block
Rule 33    stmt -> WHILE LRB exp RRB stmt
Rule 34    stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
Rule 35    stmt -> IF LRB exp RRB stmt elseiflist other
Rule 36    stmt -> PRINT LRB ID RRB SEMICOLON
Rule 37    other -> ELSE stmt
Rule 38    other -> <empty>
Rule 39    elseiflist -> elseiflist ELIF LRB exp RRB stmt
Rule 40    elseiflist -> <empty>
Rule 41    exp -> lvalue ASSIGN exp
Rule 42    exp -> exp operator exp
Rule 43    exp -> exp relop exp
Rule 44    exp -> const
Rule 45    exp -> lvalue
Rule 46    exp -> ID LRB explist RRB
Rule 47    exp -> LRB exp RRB
Rule 48    exp -> ID LRB RRB
Rule 49    exp -> SUB exp
Rule 50    exp -> NOT exp
Rule 51    operator -> OR
Rule 52    operator -> AND
Rule 53    operator -> SUM
Rule 54    operator -> SUB
Rule 55    operator -> MUL
Rule 56    operator -> DIV
Rule 57    operator -> MOD
Rule 58    const -> INTEGERNUMBER
Rule 59    const -> FLOATNUMBER
Rule 60    const -> TRUE
Rule 61    const -> FALSE
Rule 62    relop -> GT
Rule 63    relop -> LT
Rule 64    relop -> NE
Rule 65    relop -> EQ
Rule 66    relop -> GE
Rule 67    relop -> LE
Rule 68    explist -> exp
Rule 69    explist -> explist COMMA exp

Terminals, with rules where they appear

AND                  : 52
ASSIGN               : 11 41
BOOLEAN              : 8
COMMA                : 13 20 69
DIV                  : 56
ELIF                 : 39
ELSE                 : 37
EQ                   : 65
ERROR                : 
FALSE                : 61
FLOAT                : 7
FLOATNUMBER          : 59
FOR                  : 34
GE                   : 66
GT                   : 62
ID                   : 9 10 11 15 16 21 22 28 29 36 46 48
IF                   : 35
INTEGER              : 6
INTEGERNUMBER        : 58
LCB                  : 25
LE                   : 67
LRB                  : 1 15 16 33 34 35 36 39 46 47 48
LSB                  : 10 22 29
LT                   : 63
MAIN                 : 1
MOD                  : 57
MUL                  : 55
NE                   : 64
NOT                  : 50
OR                   : 51
PRINT                : 36
RCB                  : 25
RETURN               : 30
RRB                  : 1 15 16 33 34 35 36 39 46 47 48
RSB                  : 10 22 29
SEMICOLON            : 14 30 31 34 34 36
SUB                  : 49 54
SUM                  : 53
TRUE                 : 60
VOID                 : 16
WHILE                : 33
error                : 

Nonterminals, with rules where they appear

block                : 1 15 16 32
const                : 44
dec                  : 2
declist              : 1 2
elseiflist           : 35 39
exp                  : 10 11 29 30 31 33 34 34 34 35 39 41 42 42 43 43 47 49 50 68 69
explist              : 46 69
funcdec              : 5
iddec                : 12 13
idlist               : 13 14
lvalue               : 41 45
operator             : 42
other                : 35
paramdec             : 19 20
paramdecs            : 15 16
paramdecslist        : 17 20
program              : 0
relop                : 43
stmt                 : 26 33 34 35 37 39
stmtlist             : 25 26
type                 : 14 15 21 22
vardec               : 4 23
varlist              : 23 25

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declist MAIN LRB RRB block
    (2) declist -> . declist dec
    (3) declist -> .

    MAIN            reduce using rule 3 (declist -> .)
    VOID            reduce using rule 3 (declist -> .)
    INTEGER         reduce using rule 3 (declist -> .)
    FLOAT           reduce using rule 3 (declist -> .)
    BOOLEAN         reduce using rule 3 (declist -> .)

    program                        shift and go to state 1
    declist                        shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> declist . MAIN LRB RRB block
    (2) declist -> declist . dec
    (4) dec -> . vardec
    (5) dec -> . funcdec
    (14) vardec -> . type idlist SEMICOLON
    (15) funcdec -> . type ID LRB paramdecs RRB block
    (16) funcdec -> . VOID ID LRB paramdecs RRB block
    (6) type -> . INTEGER
    (7) type -> . FLOAT
    (8) type -> . BOOLEAN

    MAIN            shift and go to state 3
    VOID            shift and go to state 8
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 10
    BOOLEAN         shift and go to state 11

    dec                            shift and go to state 4
    vardec                         shift and go to state 5
    funcdec                        shift and go to state 6
    type                           shift and go to state 7

state 3

    (1) program -> declist MAIN . LRB RRB block

    LRB             shift and go to state 12


state 4

    (2) declist -> declist dec .

    MAIN            reduce using rule 2 (declist -> declist dec .)
    VOID            reduce using rule 2 (declist -> declist dec .)
    INTEGER         reduce using rule 2 (declist -> declist dec .)
    FLOAT           reduce using rule 2 (declist -> declist dec .)
    BOOLEAN         reduce using rule 2 (declist -> declist dec .)


state 5

    (4) dec -> vardec .

    MAIN            reduce using rule 4 (dec -> vardec .)
    VOID            reduce using rule 4 (dec -> vardec .)
    INTEGER         reduce using rule 4 (dec -> vardec .)
    FLOAT           reduce using rule 4 (dec -> vardec .)
    BOOLEAN         reduce using rule 4 (dec -> vardec .)


state 6

    (5) dec -> funcdec .

    MAIN            reduce using rule 5 (dec -> funcdec .)
    VOID            reduce using rule 5 (dec -> funcdec .)
    INTEGER         reduce using rule 5 (dec -> funcdec .)
    FLOAT           reduce using rule 5 (dec -> funcdec .)
    BOOLEAN         reduce using rule 5 (dec -> funcdec .)


state 7

    (14) vardec -> type . idlist SEMICOLON
    (15) funcdec -> type . ID LRB paramdecs RRB block
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (9) iddec -> . ID
    (10) iddec -> . ID LSB exp RSB
    (11) iddec -> . ID ASSIGN exp

    ID              shift and go to state 14

    idlist                         shift and go to state 13
    iddec                          shift and go to state 15

state 8

    (16) funcdec -> VOID . ID LRB paramdecs RRB block

    ID              shift and go to state 16


state 9

    (6) type -> INTEGER .

    ID              reduce using rule 6 (type -> INTEGER .)


state 10

    (7) type -> FLOAT .

    ID              reduce using rule 7 (type -> FLOAT .)


state 11

    (8) type -> BOOLEAN .

    ID              reduce using rule 8 (type -> BOOLEAN .)


state 12

    (1) program -> declist MAIN LRB . RRB block

    RRB             shift and go to state 17


state 13

    (14) vardec -> type idlist . SEMICOLON
    (13) idlist -> idlist . COMMA iddec

    SEMICOLON       shift and go to state 18
    COMMA           shift and go to state 19


state 14

    (15) funcdec -> type ID . LRB paramdecs RRB block
    (9) iddec -> ID .
    (10) iddec -> ID . LSB exp RSB
    (11) iddec -> ID . ASSIGN exp

    LRB             shift and go to state 20
    SEMICOLON       reduce using rule 9 (iddec -> ID .)
    COMMA           reduce using rule 9 (iddec -> ID .)
    LSB             shift and go to state 21
    ASSIGN          shift and go to state 22


state 15

    (12) idlist -> iddec .

    SEMICOLON       reduce using rule 12 (idlist -> iddec .)
    COMMA           reduce using rule 12 (idlist -> iddec .)


state 16

    (16) funcdec -> VOID ID . LRB paramdecs RRB block

    LRB             shift and go to state 23


state 17

    (1) program -> declist MAIN LRB RRB . block
    (25) block -> . LCB varlist stmtlist RCB

    LCB             shift and go to state 25

    block                          shift and go to state 24

state 18

    (14) vardec -> type idlist SEMICOLON .

    MAIN            reduce using rule 14 (vardec -> type idlist SEMICOLON .)
    VOID            reduce using rule 14 (vardec -> type idlist SEMICOLON .)
    INTEGER         reduce using rule 14 (vardec -> type idlist SEMICOLON .)
    FLOAT           reduce using rule 14 (vardec -> type idlist SEMICOLON .)
    BOOLEAN         reduce using rule 14 (vardec -> type idlist SEMICOLON .)
    RCB             reduce using rule 14 (vardec -> type idlist SEMICOLON .)
    RETURN          reduce using rule 14 (vardec -> type idlist SEMICOLON .)
    WHILE           reduce using rule 14 (vardec -> type idlist SEMICOLON .)
    FOR             reduce using rule 14 (vardec -> type idlist SEMICOLON .)
    IF              reduce using rule 14 (vardec -> type idlist SEMICOLON .)
    PRINT           reduce using rule 14 (vardec -> type idlist SEMICOLON .)
    ID              reduce using rule 14 (vardec -> type idlist SEMICOLON .)
    LRB             reduce using rule 14 (vardec -> type idlist SEMICOLON .)
    SUB             reduce using rule 14 (vardec -> type idlist SEMICOLON .)
    NOT             reduce using rule 14 (vardec -> type idlist SEMICOLON .)
    LCB             reduce using rule 14 (vardec -> type idlist SEMICOLON .)
    INTEGERNUMBER   reduce using rule 14 (vardec -> type idlist SEMICOLON .)
    FLOATNUMBER     reduce using rule 14 (vardec -> type idlist SEMICOLON .)
    TRUE            reduce using rule 14 (vardec -> type idlist SEMICOLON .)
    FALSE           reduce using rule 14 (vardec -> type idlist SEMICOLON .)


state 19

    (13) idlist -> idlist COMMA . iddec
    (9) iddec -> . ID
    (10) iddec -> . ID LSB exp RSB
    (11) iddec -> . ID ASSIGN exp

    ID              shift and go to state 27

    iddec                          shift and go to state 26

state 20

    (15) funcdec -> type ID LRB . paramdecs RRB block
    (17) paramdecs -> . paramdecslist
    (18) paramdecs -> .
    (19) paramdecslist -> . paramdec
    (20) paramdecslist -> . paramdecslist COMMA paramdec
    (21) paramdec -> . type ID
    (22) paramdec -> . type ID LSB RSB
    (6) type -> . INTEGER
    (7) type -> . FLOAT
    (8) type -> . BOOLEAN

    RRB             reduce using rule 18 (paramdecs -> .)
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 10
    BOOLEAN         shift and go to state 11

    type                           shift and go to state 28
    paramdecs                      shift and go to state 29
    paramdecslist                  shift and go to state 30
    paramdec                       shift and go to state 31

state 21

    (10) iddec -> ID LSB . exp RSB
    (41) exp -> . lvalue ASSIGN exp
    (42) exp -> . exp operator exp
    (43) exp -> . exp relop exp
    (44) exp -> . const
    (45) exp -> . lvalue
    (46) exp -> . ID LRB explist RRB
    (47) exp -> . LRB exp RRB
    (48) exp -> . ID LRB RRB
    (49) exp -> . SUB exp
    (50) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (58) const -> . INTEGERNUMBER
    (59) const -> . FLOATNUMBER
    (60) const -> . TRUE
    (61) const -> . FALSE

    ID              shift and go to state 32
    LRB             shift and go to state 36
    SUB             shift and go to state 37
    NOT             shift and go to state 38
    INTEGERNUMBER   shift and go to state 39
    FLOATNUMBER     shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42

    exp                            shift and go to state 33
    lvalue                         shift and go to state 34
    const                          shift and go to state 35

state 22

    (11) iddec -> ID ASSIGN . exp
    (41) exp -> . lvalue ASSIGN exp
    (42) exp -> . exp operator exp
    (43) exp -> . exp relop exp
    (44) exp -> . const
    (45) exp -> . lvalue
    (46) exp -> . ID LRB explist RRB
    (47) exp -> . LRB exp RRB
    (48) exp -> . ID LRB RRB
    (49) exp -> . SUB exp
    (50) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (58) const -> . INTEGERNUMBER
    (59) const -> . FLOATNUMBER
    (60) const -> . TRUE
    (61) const -> . FALSE

    ID              shift and go to state 32
    LRB             shift and go to state 36
    SUB             shift and go to state 37
    NOT             shift and go to state 38
    INTEGERNUMBER   shift and go to state 39
    FLOATNUMBER     shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42

    exp                            shift and go to state 43
    lvalue                         shift and go to state 34
    const                          shift and go to state 35

state 23

    (16) funcdec -> VOID ID LRB . paramdecs RRB block
    (17) paramdecs -> . paramdecslist
    (18) paramdecs -> .
    (19) paramdecslist -> . paramdec
    (20) paramdecslist -> . paramdecslist COMMA paramdec
    (21) paramdec -> . type ID
    (22) paramdec -> . type ID LSB RSB
    (6) type -> . INTEGER
    (7) type -> . FLOAT
    (8) type -> . BOOLEAN

    RRB             reduce using rule 18 (paramdecs -> .)
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 10
    BOOLEAN         shift and go to state 11

    paramdecs                      shift and go to state 44
    paramdecslist                  shift and go to state 30
    paramdec                       shift and go to state 31
    type                           shift and go to state 28

state 24

    (1) program -> declist MAIN LRB RRB block .

    $end            reduce using rule 1 (program -> declist MAIN LRB RRB block .)


state 25

    (25) block -> LCB . varlist stmtlist RCB
    (23) varlist -> . vardec varlist
    (24) varlist -> .
    (14) vardec -> . type idlist SEMICOLON
    (6) type -> . INTEGER
    (7) type -> . FLOAT
    (8) type -> . BOOLEAN

    RCB             reduce using rule 24 (varlist -> .)
    RETURN          reduce using rule 24 (varlist -> .)
    WHILE           reduce using rule 24 (varlist -> .)
    FOR             reduce using rule 24 (varlist -> .)
    IF              reduce using rule 24 (varlist -> .)
    PRINT           reduce using rule 24 (varlist -> .)
    ID              reduce using rule 24 (varlist -> .)
    LRB             reduce using rule 24 (varlist -> .)
    SUB             reduce using rule 24 (varlist -> .)
    NOT             reduce using rule 24 (varlist -> .)
    LCB             reduce using rule 24 (varlist -> .)
    INTEGERNUMBER   reduce using rule 24 (varlist -> .)
    FLOATNUMBER     reduce using rule 24 (varlist -> .)
    TRUE            reduce using rule 24 (varlist -> .)
    FALSE           reduce using rule 24 (varlist -> .)
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 10
    BOOLEAN         shift and go to state 11

    varlist                        shift and go to state 45
    vardec                         shift and go to state 46
    type                           shift and go to state 47

state 26

    (13) idlist -> idlist COMMA iddec .

    SEMICOLON       reduce using rule 13 (idlist -> idlist COMMA iddec .)
    COMMA           reduce using rule 13 (idlist -> idlist COMMA iddec .)


state 27

    (9) iddec -> ID .
    (10) iddec -> ID . LSB exp RSB
    (11) iddec -> ID . ASSIGN exp

    SEMICOLON       reduce using rule 9 (iddec -> ID .)
    COMMA           reduce using rule 9 (iddec -> ID .)
    LSB             shift and go to state 21
    ASSIGN          shift and go to state 22


state 28

    (21) paramdec -> type . ID
    (22) paramdec -> type . ID LSB RSB

    ID              shift and go to state 48


state 29

    (15) funcdec -> type ID LRB paramdecs . RRB block

    RRB             shift and go to state 49


state 30

    (17) paramdecs -> paramdecslist .
    (20) paramdecslist -> paramdecslist . COMMA paramdec

    RRB             reduce using rule 17 (paramdecs -> paramdecslist .)
    COMMA           shift and go to state 50


state 31

    (19) paramdecslist -> paramdec .

    COMMA           reduce using rule 19 (paramdecslist -> paramdec .)
    RRB             reduce using rule 19 (paramdecslist -> paramdec .)


state 32

    (46) exp -> ID . LRB explist RRB
    (48) exp -> ID . LRB RRB
    (28) lvalue -> ID .
    (29) lvalue -> ID . LSB exp RSB

    LRB             shift and go to state 51
    ASSIGN          reduce using rule 28 (lvalue -> ID .)
    RSB             reduce using rule 28 (lvalue -> ID .)
    OR              reduce using rule 28 (lvalue -> ID .)
    AND             reduce using rule 28 (lvalue -> ID .)
    SUM             reduce using rule 28 (lvalue -> ID .)
    SUB             reduce using rule 28 (lvalue -> ID .)
    MUL             reduce using rule 28 (lvalue -> ID .)
    DIV             reduce using rule 28 (lvalue -> ID .)
    MOD             reduce using rule 28 (lvalue -> ID .)
    GT              reduce using rule 28 (lvalue -> ID .)
    LT              reduce using rule 28 (lvalue -> ID .)
    NE              reduce using rule 28 (lvalue -> ID .)
    EQ              reduce using rule 28 (lvalue -> ID .)
    GE              reduce using rule 28 (lvalue -> ID .)
    LE              reduce using rule 28 (lvalue -> ID .)
    SEMICOLON       reduce using rule 28 (lvalue -> ID .)
    COMMA           reduce using rule 28 (lvalue -> ID .)
    RRB             reduce using rule 28 (lvalue -> ID .)
    LSB             shift and go to state 52


state 33

    (10) iddec -> ID LSB exp . RSB
    (42) exp -> exp . operator exp
    (43) exp -> exp . relop exp
    (51) operator -> . OR
    (52) operator -> . AND
    (53) operator -> . SUM
    (54) operator -> . SUB
    (55) operator -> . MUL
    (56) operator -> . DIV
    (57) operator -> . MOD
    (62) relop -> . GT
    (63) relop -> . LT
    (64) relop -> . NE
    (65) relop -> . EQ
    (66) relop -> . GE
    (67) relop -> . LE

    RSB             shift and go to state 53
    OR              shift and go to state 56
    AND             shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    GE              shift and go to state 67
    LE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 34

    (41) exp -> lvalue . ASSIGN exp
    (45) exp -> lvalue .

    ASSIGN          shift and go to state 69
    RSB             reduce using rule 45 (exp -> lvalue .)
    OR              reduce using rule 45 (exp -> lvalue .)
    AND             reduce using rule 45 (exp -> lvalue .)
    SUM             reduce using rule 45 (exp -> lvalue .)
    SUB             reduce using rule 45 (exp -> lvalue .)
    MUL             reduce using rule 45 (exp -> lvalue .)
    DIV             reduce using rule 45 (exp -> lvalue .)
    MOD             reduce using rule 45 (exp -> lvalue .)
    GT              reduce using rule 45 (exp -> lvalue .)
    LT              reduce using rule 45 (exp -> lvalue .)
    NE              reduce using rule 45 (exp -> lvalue .)
    EQ              reduce using rule 45 (exp -> lvalue .)
    GE              reduce using rule 45 (exp -> lvalue .)
    LE              reduce using rule 45 (exp -> lvalue .)
    SEMICOLON       reduce using rule 45 (exp -> lvalue .)
    COMMA           reduce using rule 45 (exp -> lvalue .)
    RRB             reduce using rule 45 (exp -> lvalue .)


state 35

    (44) exp -> const .

    RSB             reduce using rule 44 (exp -> const .)
    OR              reduce using rule 44 (exp -> const .)
    AND             reduce using rule 44 (exp -> const .)
    SUM             reduce using rule 44 (exp -> const .)
    SUB             reduce using rule 44 (exp -> const .)
    MUL             reduce using rule 44 (exp -> const .)
    DIV             reduce using rule 44 (exp -> const .)
    MOD             reduce using rule 44 (exp -> const .)
    GT              reduce using rule 44 (exp -> const .)
    LT              reduce using rule 44 (exp -> const .)
    NE              reduce using rule 44 (exp -> const .)
    EQ              reduce using rule 44 (exp -> const .)
    GE              reduce using rule 44 (exp -> const .)
    LE              reduce using rule 44 (exp -> const .)
    SEMICOLON       reduce using rule 44 (exp -> const .)
    COMMA           reduce using rule 44 (exp -> const .)
    RRB             reduce using rule 44 (exp -> const .)


state 36

    (47) exp -> LRB . exp RRB
    (41) exp -> . lvalue ASSIGN exp
    (42) exp -> . exp operator exp
    (43) exp -> . exp relop exp
    (44) exp -> . const
    (45) exp -> . lvalue
    (46) exp -> . ID LRB explist RRB
    (47) exp -> . LRB exp RRB
    (48) exp -> . ID LRB RRB
    (49) exp -> . SUB exp
    (50) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (58) const -> . INTEGERNUMBER
    (59) const -> . FLOATNUMBER
    (60) const -> . TRUE
    (61) const -> . FALSE

    ID              shift and go to state 32
    LRB             shift and go to state 36
    SUB             shift and go to state 37
    NOT             shift and go to state 38
    INTEGERNUMBER   shift and go to state 39
    FLOATNUMBER     shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42

    exp                            shift and go to state 70
    lvalue                         shift and go to state 34
    const                          shift and go to state 35

state 37

    (49) exp -> SUB . exp
    (41) exp -> . lvalue ASSIGN exp
    (42) exp -> . exp operator exp
    (43) exp -> . exp relop exp
    (44) exp -> . const
    (45) exp -> . lvalue
    (46) exp -> . ID LRB explist RRB
    (47) exp -> . LRB exp RRB
    (48) exp -> . ID LRB RRB
    (49) exp -> . SUB exp
    (50) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (58) const -> . INTEGERNUMBER
    (59) const -> . FLOATNUMBER
    (60) const -> . TRUE
    (61) const -> . FALSE

    ID              shift and go to state 32
    LRB             shift and go to state 36
    SUB             shift and go to state 37
    NOT             shift and go to state 38
    INTEGERNUMBER   shift and go to state 39
    FLOATNUMBER     shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42

    exp                            shift and go to state 71
    lvalue                         shift and go to state 34
    const                          shift and go to state 35

state 38

    (50) exp -> NOT . exp
    (41) exp -> . lvalue ASSIGN exp
    (42) exp -> . exp operator exp
    (43) exp -> . exp relop exp
    (44) exp -> . const
    (45) exp -> . lvalue
    (46) exp -> . ID LRB explist RRB
    (47) exp -> . LRB exp RRB
    (48) exp -> . ID LRB RRB
    (49) exp -> . SUB exp
    (50) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (58) const -> . INTEGERNUMBER
    (59) const -> . FLOATNUMBER
    (60) const -> . TRUE
    (61) const -> . FALSE

    ID              shift and go to state 32
    LRB             shift and go to state 36
    SUB             shift and go to state 37
    NOT             shift and go to state 38
    INTEGERNUMBER   shift and go to state 39
    FLOATNUMBER     shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42

    exp                            shift and go to state 72
    lvalue                         shift and go to state 34
    const                          shift and go to state 35

state 39

    (58) const -> INTEGERNUMBER .

    RSB             reduce using rule 58 (const -> INTEGERNUMBER .)
    OR              reduce using rule 58 (const -> INTEGERNUMBER .)
    AND             reduce using rule 58 (const -> INTEGERNUMBER .)
    SUM             reduce using rule 58 (const -> INTEGERNUMBER .)
    SUB             reduce using rule 58 (const -> INTEGERNUMBER .)
    MUL             reduce using rule 58 (const -> INTEGERNUMBER .)
    DIV             reduce using rule 58 (const -> INTEGERNUMBER .)
    MOD             reduce using rule 58 (const -> INTEGERNUMBER .)
    GT              reduce using rule 58 (const -> INTEGERNUMBER .)
    LT              reduce using rule 58 (const -> INTEGERNUMBER .)
    NE              reduce using rule 58 (const -> INTEGERNUMBER .)
    EQ              reduce using rule 58 (const -> INTEGERNUMBER .)
    GE              reduce using rule 58 (const -> INTEGERNUMBER .)
    LE              reduce using rule 58 (const -> INTEGERNUMBER .)
    SEMICOLON       reduce using rule 58 (const -> INTEGERNUMBER .)
    COMMA           reduce using rule 58 (const -> INTEGERNUMBER .)
    RRB             reduce using rule 58 (const -> INTEGERNUMBER .)


state 40

    (59) const -> FLOATNUMBER .

    RSB             reduce using rule 59 (const -> FLOATNUMBER .)
    OR              reduce using rule 59 (const -> FLOATNUMBER .)
    AND             reduce using rule 59 (const -> FLOATNUMBER .)
    SUM             reduce using rule 59 (const -> FLOATNUMBER .)
    SUB             reduce using rule 59 (const -> FLOATNUMBER .)
    MUL             reduce using rule 59 (const -> FLOATNUMBER .)
    DIV             reduce using rule 59 (const -> FLOATNUMBER .)
    MOD             reduce using rule 59 (const -> FLOATNUMBER .)
    GT              reduce using rule 59 (const -> FLOATNUMBER .)
    LT              reduce using rule 59 (const -> FLOATNUMBER .)
    NE              reduce using rule 59 (const -> FLOATNUMBER .)
    EQ              reduce using rule 59 (const -> FLOATNUMBER .)
    GE              reduce using rule 59 (const -> FLOATNUMBER .)
    LE              reduce using rule 59 (const -> FLOATNUMBER .)
    SEMICOLON       reduce using rule 59 (const -> FLOATNUMBER .)
    COMMA           reduce using rule 59 (const -> FLOATNUMBER .)
    RRB             reduce using rule 59 (const -> FLOATNUMBER .)


state 41

    (60) const -> TRUE .

    RSB             reduce using rule 60 (const -> TRUE .)
    OR              reduce using rule 60 (const -> TRUE .)
    AND             reduce using rule 60 (const -> TRUE .)
    SUM             reduce using rule 60 (const -> TRUE .)
    SUB             reduce using rule 60 (const -> TRUE .)
    MUL             reduce using rule 60 (const -> TRUE .)
    DIV             reduce using rule 60 (const -> TRUE .)
    MOD             reduce using rule 60 (const -> TRUE .)
    GT              reduce using rule 60 (const -> TRUE .)
    LT              reduce using rule 60 (const -> TRUE .)
    NE              reduce using rule 60 (const -> TRUE .)
    EQ              reduce using rule 60 (const -> TRUE .)
    GE              reduce using rule 60 (const -> TRUE .)
    LE              reduce using rule 60 (const -> TRUE .)
    SEMICOLON       reduce using rule 60 (const -> TRUE .)
    COMMA           reduce using rule 60 (const -> TRUE .)
    RRB             reduce using rule 60 (const -> TRUE .)


state 42

    (61) const -> FALSE .

    RSB             reduce using rule 61 (const -> FALSE .)
    OR              reduce using rule 61 (const -> FALSE .)
    AND             reduce using rule 61 (const -> FALSE .)
    SUM             reduce using rule 61 (const -> FALSE .)
    SUB             reduce using rule 61 (const -> FALSE .)
    MUL             reduce using rule 61 (const -> FALSE .)
    DIV             reduce using rule 61 (const -> FALSE .)
    MOD             reduce using rule 61 (const -> FALSE .)
    GT              reduce using rule 61 (const -> FALSE .)
    LT              reduce using rule 61 (const -> FALSE .)
    NE              reduce using rule 61 (const -> FALSE .)
    EQ              reduce using rule 61 (const -> FALSE .)
    GE              reduce using rule 61 (const -> FALSE .)
    LE              reduce using rule 61 (const -> FALSE .)
    SEMICOLON       reduce using rule 61 (const -> FALSE .)
    COMMA           reduce using rule 61 (const -> FALSE .)
    RRB             reduce using rule 61 (const -> FALSE .)


state 43

    (11) iddec -> ID ASSIGN exp .
    (42) exp -> exp . operator exp
    (43) exp -> exp . relop exp
    (51) operator -> . OR
    (52) operator -> . AND
    (53) operator -> . SUM
    (54) operator -> . SUB
    (55) operator -> . MUL
    (56) operator -> . DIV
    (57) operator -> . MOD
    (62) relop -> . GT
    (63) relop -> . LT
    (64) relop -> . NE
    (65) relop -> . EQ
    (66) relop -> . GE
    (67) relop -> . LE

    SEMICOLON       reduce using rule 11 (iddec -> ID ASSIGN exp .)
    COMMA           reduce using rule 11 (iddec -> ID ASSIGN exp .)
    OR              shift and go to state 56
    AND             shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    GE              shift and go to state 67
    LE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 44

    (16) funcdec -> VOID ID LRB paramdecs . RRB block

    RRB             shift and go to state 73


state 45

    (25) block -> LCB varlist . stmtlist RCB
    (26) stmtlist -> . stmtlist stmt
    (27) stmtlist -> .

    RCB             reduce using rule 27 (stmtlist -> .)
    RETURN          reduce using rule 27 (stmtlist -> .)
    WHILE           reduce using rule 27 (stmtlist -> .)
    FOR             reduce using rule 27 (stmtlist -> .)
    IF              reduce using rule 27 (stmtlist -> .)
    PRINT           reduce using rule 27 (stmtlist -> .)
    ID              reduce using rule 27 (stmtlist -> .)
    LRB             reduce using rule 27 (stmtlist -> .)
    SUB             reduce using rule 27 (stmtlist -> .)
    NOT             reduce using rule 27 (stmtlist -> .)
    LCB             reduce using rule 27 (stmtlist -> .)
    INTEGERNUMBER   reduce using rule 27 (stmtlist -> .)
    FLOATNUMBER     reduce using rule 27 (stmtlist -> .)
    TRUE            reduce using rule 27 (stmtlist -> .)
    FALSE           reduce using rule 27 (stmtlist -> .)

    stmtlist                       shift and go to state 74

state 46

    (23) varlist -> vardec . varlist
    (23) varlist -> . vardec varlist
    (24) varlist -> .
    (14) vardec -> . type idlist SEMICOLON
    (6) type -> . INTEGER
    (7) type -> . FLOAT
    (8) type -> . BOOLEAN

    RCB             reduce using rule 24 (varlist -> .)
    RETURN          reduce using rule 24 (varlist -> .)
    WHILE           reduce using rule 24 (varlist -> .)
    FOR             reduce using rule 24 (varlist -> .)
    IF              reduce using rule 24 (varlist -> .)
    PRINT           reduce using rule 24 (varlist -> .)
    ID              reduce using rule 24 (varlist -> .)
    LRB             reduce using rule 24 (varlist -> .)
    SUB             reduce using rule 24 (varlist -> .)
    NOT             reduce using rule 24 (varlist -> .)
    LCB             reduce using rule 24 (varlist -> .)
    INTEGERNUMBER   reduce using rule 24 (varlist -> .)
    FLOATNUMBER     reduce using rule 24 (varlist -> .)
    TRUE            reduce using rule 24 (varlist -> .)
    FALSE           reduce using rule 24 (varlist -> .)
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 10
    BOOLEAN         shift and go to state 11

    vardec                         shift and go to state 46
    varlist                        shift and go to state 75
    type                           shift and go to state 47

state 47

    (14) vardec -> type . idlist SEMICOLON
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (9) iddec -> . ID
    (10) iddec -> . ID LSB exp RSB
    (11) iddec -> . ID ASSIGN exp

    ID              shift and go to state 27

    idlist                         shift and go to state 13
    iddec                          shift and go to state 15

state 48

    (21) paramdec -> type ID .
    (22) paramdec -> type ID . LSB RSB

    COMMA           reduce using rule 21 (paramdec -> type ID .)
    RRB             reduce using rule 21 (paramdec -> type ID .)
    LSB             shift and go to state 76


state 49

    (15) funcdec -> type ID LRB paramdecs RRB . block
    (25) block -> . LCB varlist stmtlist RCB

    LCB             shift and go to state 25

    block                          shift and go to state 77

state 50

    (20) paramdecslist -> paramdecslist COMMA . paramdec
    (21) paramdec -> . type ID
    (22) paramdec -> . type ID LSB RSB
    (6) type -> . INTEGER
    (7) type -> . FLOAT
    (8) type -> . BOOLEAN

    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 10
    BOOLEAN         shift and go to state 11

    paramdec                       shift and go to state 78
    type                           shift and go to state 28

state 51

    (46) exp -> ID LRB . explist RRB
    (48) exp -> ID LRB . RRB
    (68) explist -> . exp
    (69) explist -> . explist COMMA exp
    (41) exp -> . lvalue ASSIGN exp
    (42) exp -> . exp operator exp
    (43) exp -> . exp relop exp
    (44) exp -> . const
    (45) exp -> . lvalue
    (46) exp -> . ID LRB explist RRB
    (47) exp -> . LRB exp RRB
    (48) exp -> . ID LRB RRB
    (49) exp -> . SUB exp
    (50) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (58) const -> . INTEGERNUMBER
    (59) const -> . FLOATNUMBER
    (60) const -> . TRUE
    (61) const -> . FALSE

    RRB             shift and go to state 80
    ID              shift and go to state 32
    LRB             shift and go to state 36
    SUB             shift and go to state 37
    NOT             shift and go to state 38
    INTEGERNUMBER   shift and go to state 39
    FLOATNUMBER     shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42

    explist                        shift and go to state 79
    exp                            shift and go to state 81
    lvalue                         shift and go to state 34
    const                          shift and go to state 35

state 52

    (29) lvalue -> ID LSB . exp RSB
    (41) exp -> . lvalue ASSIGN exp
    (42) exp -> . exp operator exp
    (43) exp -> . exp relop exp
    (44) exp -> . const
    (45) exp -> . lvalue
    (46) exp -> . ID LRB explist RRB
    (47) exp -> . LRB exp RRB
    (48) exp -> . ID LRB RRB
    (49) exp -> . SUB exp
    (50) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (58) const -> . INTEGERNUMBER
    (59) const -> . FLOATNUMBER
    (60) const -> . TRUE
    (61) const -> . FALSE

    ID              shift and go to state 32
    LRB             shift and go to state 36
    SUB             shift and go to state 37
    NOT             shift and go to state 38
    INTEGERNUMBER   shift and go to state 39
    FLOATNUMBER     shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42

    exp                            shift and go to state 82
    lvalue                         shift and go to state 34
    const                          shift and go to state 35

state 53

    (10) iddec -> ID LSB exp RSB .

    SEMICOLON       reduce using rule 10 (iddec -> ID LSB exp RSB .)
    COMMA           reduce using rule 10 (iddec -> ID LSB exp RSB .)


state 54

    (42) exp -> exp operator . exp
    (41) exp -> . lvalue ASSIGN exp
    (42) exp -> . exp operator exp
    (43) exp -> . exp relop exp
    (44) exp -> . const
    (45) exp -> . lvalue
    (46) exp -> . ID LRB explist RRB
    (47) exp -> . LRB exp RRB
    (48) exp -> . ID LRB RRB
    (49) exp -> . SUB exp
    (50) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (58) const -> . INTEGERNUMBER
    (59) const -> . FLOATNUMBER
    (60) const -> . TRUE
    (61) const -> . FALSE

    ID              shift and go to state 32
    LRB             shift and go to state 36
    SUB             shift and go to state 37
    NOT             shift and go to state 38
    INTEGERNUMBER   shift and go to state 39
    FLOATNUMBER     shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42

    exp                            shift and go to state 83
    lvalue                         shift and go to state 34
    const                          shift and go to state 35

state 55

    (43) exp -> exp relop . exp
    (41) exp -> . lvalue ASSIGN exp
    (42) exp -> . exp operator exp
    (43) exp -> . exp relop exp
    (44) exp -> . const
    (45) exp -> . lvalue
    (46) exp -> . ID LRB explist RRB
    (47) exp -> . LRB exp RRB
    (48) exp -> . ID LRB RRB
    (49) exp -> . SUB exp
    (50) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (58) const -> . INTEGERNUMBER
    (59) const -> . FLOATNUMBER
    (60) const -> . TRUE
    (61) const -> . FALSE

    ID              shift and go to state 32
    LRB             shift and go to state 36
    SUB             shift and go to state 37
    NOT             shift and go to state 38
    INTEGERNUMBER   shift and go to state 39
    FLOATNUMBER     shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42

    exp                            shift and go to state 84
    lvalue                         shift and go to state 34
    const                          shift and go to state 35

state 56

    (51) operator -> OR .

    ID              reduce using rule 51 (operator -> OR .)
    LRB             reduce using rule 51 (operator -> OR .)
    SUB             reduce using rule 51 (operator -> OR .)
    NOT             reduce using rule 51 (operator -> OR .)
    INTEGERNUMBER   reduce using rule 51 (operator -> OR .)
    FLOATNUMBER     reduce using rule 51 (operator -> OR .)
    TRUE            reduce using rule 51 (operator -> OR .)
    FALSE           reduce using rule 51 (operator -> OR .)


state 57

    (52) operator -> AND .

    ID              reduce using rule 52 (operator -> AND .)
    LRB             reduce using rule 52 (operator -> AND .)
    SUB             reduce using rule 52 (operator -> AND .)
    NOT             reduce using rule 52 (operator -> AND .)
    INTEGERNUMBER   reduce using rule 52 (operator -> AND .)
    FLOATNUMBER     reduce using rule 52 (operator -> AND .)
    TRUE            reduce using rule 52 (operator -> AND .)
    FALSE           reduce using rule 52 (operator -> AND .)


state 58

    (53) operator -> SUM .

    ID              reduce using rule 53 (operator -> SUM .)
    LRB             reduce using rule 53 (operator -> SUM .)
    SUB             reduce using rule 53 (operator -> SUM .)
    NOT             reduce using rule 53 (operator -> SUM .)
    INTEGERNUMBER   reduce using rule 53 (operator -> SUM .)
    FLOATNUMBER     reduce using rule 53 (operator -> SUM .)
    TRUE            reduce using rule 53 (operator -> SUM .)
    FALSE           reduce using rule 53 (operator -> SUM .)


state 59

    (54) operator -> SUB .

    ID              reduce using rule 54 (operator -> SUB .)
    LRB             reduce using rule 54 (operator -> SUB .)
    SUB             reduce using rule 54 (operator -> SUB .)
    NOT             reduce using rule 54 (operator -> SUB .)
    INTEGERNUMBER   reduce using rule 54 (operator -> SUB .)
    FLOATNUMBER     reduce using rule 54 (operator -> SUB .)
    TRUE            reduce using rule 54 (operator -> SUB .)
    FALSE           reduce using rule 54 (operator -> SUB .)


state 60

    (55) operator -> MUL .

    ID              reduce using rule 55 (operator -> MUL .)
    LRB             reduce using rule 55 (operator -> MUL .)
    SUB             reduce using rule 55 (operator -> MUL .)
    NOT             reduce using rule 55 (operator -> MUL .)
    INTEGERNUMBER   reduce using rule 55 (operator -> MUL .)
    FLOATNUMBER     reduce using rule 55 (operator -> MUL .)
    TRUE            reduce using rule 55 (operator -> MUL .)
    FALSE           reduce using rule 55 (operator -> MUL .)


state 61

    (56) operator -> DIV .

    ID              reduce using rule 56 (operator -> DIV .)
    LRB             reduce using rule 56 (operator -> DIV .)
    SUB             reduce using rule 56 (operator -> DIV .)
    NOT             reduce using rule 56 (operator -> DIV .)
    INTEGERNUMBER   reduce using rule 56 (operator -> DIV .)
    FLOATNUMBER     reduce using rule 56 (operator -> DIV .)
    TRUE            reduce using rule 56 (operator -> DIV .)
    FALSE           reduce using rule 56 (operator -> DIV .)


state 62

    (57) operator -> MOD .

    ID              reduce using rule 57 (operator -> MOD .)
    LRB             reduce using rule 57 (operator -> MOD .)
    SUB             reduce using rule 57 (operator -> MOD .)
    NOT             reduce using rule 57 (operator -> MOD .)
    INTEGERNUMBER   reduce using rule 57 (operator -> MOD .)
    FLOATNUMBER     reduce using rule 57 (operator -> MOD .)
    TRUE            reduce using rule 57 (operator -> MOD .)
    FALSE           reduce using rule 57 (operator -> MOD .)


state 63

    (62) relop -> GT .

    ID              reduce using rule 62 (relop -> GT .)
    LRB             reduce using rule 62 (relop -> GT .)
    SUB             reduce using rule 62 (relop -> GT .)
    NOT             reduce using rule 62 (relop -> GT .)
    INTEGERNUMBER   reduce using rule 62 (relop -> GT .)
    FLOATNUMBER     reduce using rule 62 (relop -> GT .)
    TRUE            reduce using rule 62 (relop -> GT .)
    FALSE           reduce using rule 62 (relop -> GT .)


state 64

    (63) relop -> LT .

    ID              reduce using rule 63 (relop -> LT .)
    LRB             reduce using rule 63 (relop -> LT .)
    SUB             reduce using rule 63 (relop -> LT .)
    NOT             reduce using rule 63 (relop -> LT .)
    INTEGERNUMBER   reduce using rule 63 (relop -> LT .)
    FLOATNUMBER     reduce using rule 63 (relop -> LT .)
    TRUE            reduce using rule 63 (relop -> LT .)
    FALSE           reduce using rule 63 (relop -> LT .)


state 65

    (64) relop -> NE .

    ID              reduce using rule 64 (relop -> NE .)
    LRB             reduce using rule 64 (relop -> NE .)
    SUB             reduce using rule 64 (relop -> NE .)
    NOT             reduce using rule 64 (relop -> NE .)
    INTEGERNUMBER   reduce using rule 64 (relop -> NE .)
    FLOATNUMBER     reduce using rule 64 (relop -> NE .)
    TRUE            reduce using rule 64 (relop -> NE .)
    FALSE           reduce using rule 64 (relop -> NE .)


state 66

    (65) relop -> EQ .

    ID              reduce using rule 65 (relop -> EQ .)
    LRB             reduce using rule 65 (relop -> EQ .)
    SUB             reduce using rule 65 (relop -> EQ .)
    NOT             reduce using rule 65 (relop -> EQ .)
    INTEGERNUMBER   reduce using rule 65 (relop -> EQ .)
    FLOATNUMBER     reduce using rule 65 (relop -> EQ .)
    TRUE            reduce using rule 65 (relop -> EQ .)
    FALSE           reduce using rule 65 (relop -> EQ .)


state 67

    (66) relop -> GE .

    ID              reduce using rule 66 (relop -> GE .)
    LRB             reduce using rule 66 (relop -> GE .)
    SUB             reduce using rule 66 (relop -> GE .)
    NOT             reduce using rule 66 (relop -> GE .)
    INTEGERNUMBER   reduce using rule 66 (relop -> GE .)
    FLOATNUMBER     reduce using rule 66 (relop -> GE .)
    TRUE            reduce using rule 66 (relop -> GE .)
    FALSE           reduce using rule 66 (relop -> GE .)


state 68

    (67) relop -> LE .

    ID              reduce using rule 67 (relop -> LE .)
    LRB             reduce using rule 67 (relop -> LE .)
    SUB             reduce using rule 67 (relop -> LE .)
    NOT             reduce using rule 67 (relop -> LE .)
    INTEGERNUMBER   reduce using rule 67 (relop -> LE .)
    FLOATNUMBER     reduce using rule 67 (relop -> LE .)
    TRUE            reduce using rule 67 (relop -> LE .)
    FALSE           reduce using rule 67 (relop -> LE .)


state 69

    (41) exp -> lvalue ASSIGN . exp
    (41) exp -> . lvalue ASSIGN exp
    (42) exp -> . exp operator exp
    (43) exp -> . exp relop exp
    (44) exp -> . const
    (45) exp -> . lvalue
    (46) exp -> . ID LRB explist RRB
    (47) exp -> . LRB exp RRB
    (48) exp -> . ID LRB RRB
    (49) exp -> . SUB exp
    (50) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (58) const -> . INTEGERNUMBER
    (59) const -> . FLOATNUMBER
    (60) const -> . TRUE
    (61) const -> . FALSE

    ID              shift and go to state 32
    LRB             shift and go to state 36
    SUB             shift and go to state 37
    NOT             shift and go to state 38
    INTEGERNUMBER   shift and go to state 39
    FLOATNUMBER     shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42

    lvalue                         shift and go to state 34
    exp                            shift and go to state 85
    const                          shift and go to state 35

state 70

    (47) exp -> LRB exp . RRB
    (42) exp -> exp . operator exp
    (43) exp -> exp . relop exp
    (51) operator -> . OR
    (52) operator -> . AND
    (53) operator -> . SUM
    (54) operator -> . SUB
    (55) operator -> . MUL
    (56) operator -> . DIV
    (57) operator -> . MOD
    (62) relop -> . GT
    (63) relop -> . LT
    (64) relop -> . NE
    (65) relop -> . EQ
    (66) relop -> . GE
    (67) relop -> . LE

    RRB             shift and go to state 86
    OR              shift and go to state 56
    AND             shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    GE              shift and go to state 67
    LE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 71

    (49) exp -> SUB exp .
    (42) exp -> exp . operator exp
    (43) exp -> exp . relop exp
    (51) operator -> . OR
    (52) operator -> . AND
    (53) operator -> . SUM
    (54) operator -> . SUB
    (55) operator -> . MUL
    (56) operator -> . DIV
    (57) operator -> . MOD
    (62) relop -> . GT
    (63) relop -> . LT
    (64) relop -> . NE
    (65) relop -> . EQ
    (66) relop -> . GE
    (67) relop -> . LE

    RSB             reduce using rule 49 (exp -> SUB exp .)
    OR              reduce using rule 49 (exp -> SUB exp .)
    AND             reduce using rule 49 (exp -> SUB exp .)
    SUM             reduce using rule 49 (exp -> SUB exp .)
    SUB             reduce using rule 49 (exp -> SUB exp .)
    MOD             reduce using rule 49 (exp -> SUB exp .)
    GT              reduce using rule 49 (exp -> SUB exp .)
    LT              reduce using rule 49 (exp -> SUB exp .)
    NE              reduce using rule 49 (exp -> SUB exp .)
    EQ              reduce using rule 49 (exp -> SUB exp .)
    GE              reduce using rule 49 (exp -> SUB exp .)
    LE              reduce using rule 49 (exp -> SUB exp .)
    SEMICOLON       reduce using rule 49 (exp -> SUB exp .)
    COMMA           reduce using rule 49 (exp -> SUB exp .)
    RRB             reduce using rule 49 (exp -> SUB exp .)
    MUL             shift and go to state 60
    DIV             shift and go to state 61

  ! MUL             [ reduce using rule 49 (exp -> SUB exp .) ]
  ! DIV             [ reduce using rule 49 (exp -> SUB exp .) ]
  ! OR              [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! SUM             [ shift and go to state 58 ]
  ! SUB             [ shift and go to state 59 ]
  ! MOD             [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! LT              [ shift and go to state 64 ]
  ! NE              [ shift and go to state 65 ]
  ! EQ              [ shift and go to state 66 ]
  ! GE              [ shift and go to state 67 ]
  ! LE              [ shift and go to state 68 ]

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 72

    (50) exp -> NOT exp .
    (42) exp -> exp . operator exp
    (43) exp -> exp . relop exp
    (51) operator -> . OR
    (52) operator -> . AND
    (53) operator -> . SUM
    (54) operator -> . SUB
    (55) operator -> . MUL
    (56) operator -> . DIV
    (57) operator -> . MOD
    (62) relop -> . GT
    (63) relop -> . LT
    (64) relop -> . NE
    (65) relop -> . EQ
    (66) relop -> . GE
    (67) relop -> . LE

    RSB             reduce using rule 50 (exp -> NOT exp .)
    MOD             reduce using rule 50 (exp -> NOT exp .)
    GT              reduce using rule 50 (exp -> NOT exp .)
    LT              reduce using rule 50 (exp -> NOT exp .)
    NE              reduce using rule 50 (exp -> NOT exp .)
    EQ              reduce using rule 50 (exp -> NOT exp .)
    GE              reduce using rule 50 (exp -> NOT exp .)
    LE              reduce using rule 50 (exp -> NOT exp .)
    SEMICOLON       reduce using rule 50 (exp -> NOT exp .)
    COMMA           reduce using rule 50 (exp -> NOT exp .)
    RRB             reduce using rule 50 (exp -> NOT exp .)
    OR              shift and go to state 56
    AND             shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61

  ! OR              [ reduce using rule 50 (exp -> NOT exp .) ]
  ! AND             [ reduce using rule 50 (exp -> NOT exp .) ]
  ! SUM             [ reduce using rule 50 (exp -> NOT exp .) ]
  ! SUB             [ reduce using rule 50 (exp -> NOT exp .) ]
  ! MUL             [ reduce using rule 50 (exp -> NOT exp .) ]
  ! DIV             [ reduce using rule 50 (exp -> NOT exp .) ]
  ! MOD             [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! LT              [ shift and go to state 64 ]
  ! NE              [ shift and go to state 65 ]
  ! EQ              [ shift and go to state 66 ]
  ! GE              [ shift and go to state 67 ]
  ! LE              [ shift and go to state 68 ]

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 73

    (16) funcdec -> VOID ID LRB paramdecs RRB . block
    (25) block -> . LCB varlist stmtlist RCB

    LCB             shift and go to state 25

    block                          shift and go to state 87

state 74

    (25) block -> LCB varlist stmtlist . RCB
    (26) stmtlist -> stmtlist . stmt
    (30) stmt -> . RETURN exp SEMICOLON
    (31) stmt -> . exp SEMICOLON
    (32) stmt -> . block
    (33) stmt -> . WHILE LRB exp RRB stmt
    (34) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (35) stmt -> . IF LRB exp RRB stmt elseiflist other
    (36) stmt -> . PRINT LRB ID RRB SEMICOLON
    (41) exp -> . lvalue ASSIGN exp
    (42) exp -> . exp operator exp
    (43) exp -> . exp relop exp
    (44) exp -> . const
    (45) exp -> . lvalue
    (46) exp -> . ID LRB explist RRB
    (47) exp -> . LRB exp RRB
    (48) exp -> . ID LRB RRB
    (49) exp -> . SUB exp
    (50) exp -> . NOT exp
    (25) block -> . LCB varlist stmtlist RCB
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (58) const -> . INTEGERNUMBER
    (59) const -> . FLOATNUMBER
    (60) const -> . TRUE
    (61) const -> . FALSE

    RCB             shift and go to state 88
    RETURN          shift and go to state 90
    WHILE           shift and go to state 93
    FOR             shift and go to state 94
    IF              shift and go to state 95
    PRINT           shift and go to state 96
    ID              shift and go to state 32
    LRB             shift and go to state 36
    SUB             shift and go to state 37
    NOT             shift and go to state 38
    LCB             shift and go to state 25
    INTEGERNUMBER   shift and go to state 39
    FLOATNUMBER     shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42

    stmt                           shift and go to state 89
    exp                            shift and go to state 91
    block                          shift and go to state 92
    lvalue                         shift and go to state 34
    const                          shift and go to state 35

state 75

    (23) varlist -> vardec varlist .

    RCB             reduce using rule 23 (varlist -> vardec varlist .)
    RETURN          reduce using rule 23 (varlist -> vardec varlist .)
    WHILE           reduce using rule 23 (varlist -> vardec varlist .)
    FOR             reduce using rule 23 (varlist -> vardec varlist .)
    IF              reduce using rule 23 (varlist -> vardec varlist .)
    PRINT           reduce using rule 23 (varlist -> vardec varlist .)
    ID              reduce using rule 23 (varlist -> vardec varlist .)
    LRB             reduce using rule 23 (varlist -> vardec varlist .)
    SUB             reduce using rule 23 (varlist -> vardec varlist .)
    NOT             reduce using rule 23 (varlist -> vardec varlist .)
    LCB             reduce using rule 23 (varlist -> vardec varlist .)
    INTEGERNUMBER   reduce using rule 23 (varlist -> vardec varlist .)
    FLOATNUMBER     reduce using rule 23 (varlist -> vardec varlist .)
    TRUE            reduce using rule 23 (varlist -> vardec varlist .)
    FALSE           reduce using rule 23 (varlist -> vardec varlist .)


state 76

    (22) paramdec -> type ID LSB . RSB

    RSB             shift and go to state 97


state 77

    (15) funcdec -> type ID LRB paramdecs RRB block .

    MAIN            reduce using rule 15 (funcdec -> type ID LRB paramdecs RRB block .)
    VOID            reduce using rule 15 (funcdec -> type ID LRB paramdecs RRB block .)
    INTEGER         reduce using rule 15 (funcdec -> type ID LRB paramdecs RRB block .)
    FLOAT           reduce using rule 15 (funcdec -> type ID LRB paramdecs RRB block .)
    BOOLEAN         reduce using rule 15 (funcdec -> type ID LRB paramdecs RRB block .)


state 78

    (20) paramdecslist -> paramdecslist COMMA paramdec .

    COMMA           reduce using rule 20 (paramdecslist -> paramdecslist COMMA paramdec .)
    RRB             reduce using rule 20 (paramdecslist -> paramdecslist COMMA paramdec .)


state 79

    (46) exp -> ID LRB explist . RRB
    (69) explist -> explist . COMMA exp

    RRB             shift and go to state 98
    COMMA           shift and go to state 99


state 80

    (48) exp -> ID LRB RRB .

    RSB             reduce using rule 48 (exp -> ID LRB RRB .)
    OR              reduce using rule 48 (exp -> ID LRB RRB .)
    AND             reduce using rule 48 (exp -> ID LRB RRB .)
    SUM             reduce using rule 48 (exp -> ID LRB RRB .)
    SUB             reduce using rule 48 (exp -> ID LRB RRB .)
    MUL             reduce using rule 48 (exp -> ID LRB RRB .)
    DIV             reduce using rule 48 (exp -> ID LRB RRB .)
    MOD             reduce using rule 48 (exp -> ID LRB RRB .)
    GT              reduce using rule 48 (exp -> ID LRB RRB .)
    LT              reduce using rule 48 (exp -> ID LRB RRB .)
    NE              reduce using rule 48 (exp -> ID LRB RRB .)
    EQ              reduce using rule 48 (exp -> ID LRB RRB .)
    GE              reduce using rule 48 (exp -> ID LRB RRB .)
    LE              reduce using rule 48 (exp -> ID LRB RRB .)
    SEMICOLON       reduce using rule 48 (exp -> ID LRB RRB .)
    COMMA           reduce using rule 48 (exp -> ID LRB RRB .)
    RRB             reduce using rule 48 (exp -> ID LRB RRB .)


state 81

    (68) explist -> exp .
    (42) exp -> exp . operator exp
    (43) exp -> exp . relop exp
    (51) operator -> . OR
    (52) operator -> . AND
    (53) operator -> . SUM
    (54) operator -> . SUB
    (55) operator -> . MUL
    (56) operator -> . DIV
    (57) operator -> . MOD
    (62) relop -> . GT
    (63) relop -> . LT
    (64) relop -> . NE
    (65) relop -> . EQ
    (66) relop -> . GE
    (67) relop -> . LE

    RRB             reduce using rule 68 (explist -> exp .)
    COMMA           reduce using rule 68 (explist -> exp .)
    OR              shift and go to state 56
    AND             shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    GE              shift and go to state 67
    LE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 82

    (29) lvalue -> ID LSB exp . RSB
    (42) exp -> exp . operator exp
    (43) exp -> exp . relop exp
    (51) operator -> . OR
    (52) operator -> . AND
    (53) operator -> . SUM
    (54) operator -> . SUB
    (55) operator -> . MUL
    (56) operator -> . DIV
    (57) operator -> . MOD
    (62) relop -> . GT
    (63) relop -> . LT
    (64) relop -> . NE
    (65) relop -> . EQ
    (66) relop -> . GE
    (67) relop -> . LE

    RSB             shift and go to state 100
    OR              shift and go to state 56
    AND             shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    GE              shift and go to state 67
    LE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 83

    (42) exp -> exp operator exp .
    (42) exp -> exp . operator exp
    (43) exp -> exp . relop exp
    (51) operator -> . OR
    (52) operator -> . AND
    (53) operator -> . SUM
    (54) operator -> . SUB
    (55) operator -> . MUL
    (56) operator -> . DIV
    (57) operator -> . MOD
    (62) relop -> . GT
    (63) relop -> . LT
    (64) relop -> . NE
    (65) relop -> . EQ
    (66) relop -> . GE
    (67) relop -> . LE

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
    RSB             reduce using rule 42 (exp -> exp operator exp .)
    SEMICOLON       reduce using rule 42 (exp -> exp operator exp .)
    COMMA           reduce using rule 42 (exp -> exp operator exp .)
    RRB             reduce using rule 42 (exp -> exp operator exp .)
    OR              shift and go to state 56
    AND             shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    GE              shift and go to state 67
    LE              shift and go to state 68

  ! OR              [ reduce using rule 42 (exp -> exp operator exp .) ]
  ! AND             [ reduce using rule 42 (exp -> exp operator exp .) ]
  ! SUM             [ reduce using rule 42 (exp -> exp operator exp .) ]
  ! SUB             [ reduce using rule 42 (exp -> exp operator exp .) ]
  ! MUL             [ reduce using rule 42 (exp -> exp operator exp .) ]
  ! DIV             [ reduce using rule 42 (exp -> exp operator exp .) ]
  ! MOD             [ reduce using rule 42 (exp -> exp operator exp .) ]
  ! GT              [ reduce using rule 42 (exp -> exp operator exp .) ]
  ! LT              [ reduce using rule 42 (exp -> exp operator exp .) ]
  ! NE              [ reduce using rule 42 (exp -> exp operator exp .) ]
  ! EQ              [ reduce using rule 42 (exp -> exp operator exp .) ]
  ! GE              [ reduce using rule 42 (exp -> exp operator exp .) ]
  ! LE              [ reduce using rule 42 (exp -> exp operator exp .) ]

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 84

    (43) exp -> exp relop exp .
    (42) exp -> exp . operator exp
    (43) exp -> exp . relop exp
    (51) operator -> . OR
    (52) operator -> . AND
    (53) operator -> . SUM
    (54) operator -> . SUB
    (55) operator -> . MUL
    (56) operator -> . DIV
    (57) operator -> . MOD
    (62) relop -> . GT
    (63) relop -> . LT
    (64) relop -> . NE
    (65) relop -> . EQ
    (66) relop -> . GE
    (67) relop -> . LE

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
    RSB             reduce using rule 43 (exp -> exp relop exp .)
    SEMICOLON       reduce using rule 43 (exp -> exp relop exp .)
    COMMA           reduce using rule 43 (exp -> exp relop exp .)
    RRB             reduce using rule 43 (exp -> exp relop exp .)
    OR              shift and go to state 56
    AND             shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    GE              shift and go to state 67
    LE              shift and go to state 68

  ! OR              [ reduce using rule 43 (exp -> exp relop exp .) ]
  ! AND             [ reduce using rule 43 (exp -> exp relop exp .) ]
  ! SUM             [ reduce using rule 43 (exp -> exp relop exp .) ]
  ! SUB             [ reduce using rule 43 (exp -> exp relop exp .) ]
  ! MUL             [ reduce using rule 43 (exp -> exp relop exp .) ]
  ! DIV             [ reduce using rule 43 (exp -> exp relop exp .) ]
  ! MOD             [ reduce using rule 43 (exp -> exp relop exp .) ]
  ! GT              [ reduce using rule 43 (exp -> exp relop exp .) ]
  ! LT              [ reduce using rule 43 (exp -> exp relop exp .) ]
  ! NE              [ reduce using rule 43 (exp -> exp relop exp .) ]
  ! EQ              [ reduce using rule 43 (exp -> exp relop exp .) ]
  ! GE              [ reduce using rule 43 (exp -> exp relop exp .) ]
  ! LE              [ reduce using rule 43 (exp -> exp relop exp .) ]

    relop                          shift and go to state 55
    operator                       shift and go to state 54

state 85

    (41) exp -> lvalue ASSIGN exp .
    (42) exp -> exp . operator exp
    (43) exp -> exp . relop exp
    (51) operator -> . OR
    (52) operator -> . AND
    (53) operator -> . SUM
    (54) operator -> . SUB
    (55) operator -> . MUL
    (56) operator -> . DIV
    (57) operator -> . MOD
    (62) relop -> . GT
    (63) relop -> . LT
    (64) relop -> . NE
    (65) relop -> . EQ
    (66) relop -> . GE
    (67) relop -> . LE

    RSB             reduce using rule 41 (exp -> lvalue ASSIGN exp .)
    MOD             reduce using rule 41 (exp -> lvalue ASSIGN exp .)
    GT              reduce using rule 41 (exp -> lvalue ASSIGN exp .)
    LT              reduce using rule 41 (exp -> lvalue ASSIGN exp .)
    NE              reduce using rule 41 (exp -> lvalue ASSIGN exp .)
    EQ              reduce using rule 41 (exp -> lvalue ASSIGN exp .)
    GE              reduce using rule 41 (exp -> lvalue ASSIGN exp .)
    LE              reduce using rule 41 (exp -> lvalue ASSIGN exp .)
    SEMICOLON       reduce using rule 41 (exp -> lvalue ASSIGN exp .)
    COMMA           reduce using rule 41 (exp -> lvalue ASSIGN exp .)
    RRB             reduce using rule 41 (exp -> lvalue ASSIGN exp .)
    OR              shift and go to state 56
    AND             shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61

  ! OR              [ reduce using rule 41 (exp -> lvalue ASSIGN exp .) ]
  ! AND             [ reduce using rule 41 (exp -> lvalue ASSIGN exp .) ]
  ! SUM             [ reduce using rule 41 (exp -> lvalue ASSIGN exp .) ]
  ! SUB             [ reduce using rule 41 (exp -> lvalue ASSIGN exp .) ]
  ! MUL             [ reduce using rule 41 (exp -> lvalue ASSIGN exp .) ]
  ! DIV             [ reduce using rule 41 (exp -> lvalue ASSIGN exp .) ]
  ! MOD             [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! LT              [ shift and go to state 64 ]
  ! NE              [ shift and go to state 65 ]
  ! EQ              [ shift and go to state 66 ]
  ! GE              [ shift and go to state 67 ]
  ! LE              [ shift and go to state 68 ]

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 86

    (47) exp -> LRB exp RRB .

    RSB             reduce using rule 47 (exp -> LRB exp RRB .)
    OR              reduce using rule 47 (exp -> LRB exp RRB .)
    AND             reduce using rule 47 (exp -> LRB exp RRB .)
    SUM             reduce using rule 47 (exp -> LRB exp RRB .)
    SUB             reduce using rule 47 (exp -> LRB exp RRB .)
    MUL             reduce using rule 47 (exp -> LRB exp RRB .)
    DIV             reduce using rule 47 (exp -> LRB exp RRB .)
    MOD             reduce using rule 47 (exp -> LRB exp RRB .)
    GT              reduce using rule 47 (exp -> LRB exp RRB .)
    LT              reduce using rule 47 (exp -> LRB exp RRB .)
    NE              reduce using rule 47 (exp -> LRB exp RRB .)
    EQ              reduce using rule 47 (exp -> LRB exp RRB .)
    GE              reduce using rule 47 (exp -> LRB exp RRB .)
    LE              reduce using rule 47 (exp -> LRB exp RRB .)
    SEMICOLON       reduce using rule 47 (exp -> LRB exp RRB .)
    COMMA           reduce using rule 47 (exp -> LRB exp RRB .)
    RRB             reduce using rule 47 (exp -> LRB exp RRB .)


state 87

    (16) funcdec -> VOID ID LRB paramdecs RRB block .

    MAIN            reduce using rule 16 (funcdec -> VOID ID LRB paramdecs RRB block .)
    VOID            reduce using rule 16 (funcdec -> VOID ID LRB paramdecs RRB block .)
    INTEGER         reduce using rule 16 (funcdec -> VOID ID LRB paramdecs RRB block .)
    FLOAT           reduce using rule 16 (funcdec -> VOID ID LRB paramdecs RRB block .)
    BOOLEAN         reduce using rule 16 (funcdec -> VOID ID LRB paramdecs RRB block .)


state 88

    (25) block -> LCB varlist stmtlist RCB .

    $end            reduce using rule 25 (block -> LCB varlist stmtlist RCB .)
    MAIN            reduce using rule 25 (block -> LCB varlist stmtlist RCB .)
    VOID            reduce using rule 25 (block -> LCB varlist stmtlist RCB .)
    INTEGER         reduce using rule 25 (block -> LCB varlist stmtlist RCB .)
    FLOAT           reduce using rule 25 (block -> LCB varlist stmtlist RCB .)
    BOOLEAN         reduce using rule 25 (block -> LCB varlist stmtlist RCB .)
    RCB             reduce using rule 25 (block -> LCB varlist stmtlist RCB .)
    RETURN          reduce using rule 25 (block -> LCB varlist stmtlist RCB .)
    WHILE           reduce using rule 25 (block -> LCB varlist stmtlist RCB .)
    FOR             reduce using rule 25 (block -> LCB varlist stmtlist RCB .)
    IF              reduce using rule 25 (block -> LCB varlist stmtlist RCB .)
    PRINT           reduce using rule 25 (block -> LCB varlist stmtlist RCB .)
    ID              reduce using rule 25 (block -> LCB varlist stmtlist RCB .)
    LRB             reduce using rule 25 (block -> LCB varlist stmtlist RCB .)
    SUB             reduce using rule 25 (block -> LCB varlist stmtlist RCB .)
    NOT             reduce using rule 25 (block -> LCB varlist stmtlist RCB .)
    LCB             reduce using rule 25 (block -> LCB varlist stmtlist RCB .)
    INTEGERNUMBER   reduce using rule 25 (block -> LCB varlist stmtlist RCB .)
    FLOATNUMBER     reduce using rule 25 (block -> LCB varlist stmtlist RCB .)
    TRUE            reduce using rule 25 (block -> LCB varlist stmtlist RCB .)
    FALSE           reduce using rule 25 (block -> LCB varlist stmtlist RCB .)
    ELIF            reduce using rule 25 (block -> LCB varlist stmtlist RCB .)
    ELSE            reduce using rule 25 (block -> LCB varlist stmtlist RCB .)


state 89

    (26) stmtlist -> stmtlist stmt .

    RCB             reduce using rule 26 (stmtlist -> stmtlist stmt .)
    RETURN          reduce using rule 26 (stmtlist -> stmtlist stmt .)
    WHILE           reduce using rule 26 (stmtlist -> stmtlist stmt .)
    FOR             reduce using rule 26 (stmtlist -> stmtlist stmt .)
    IF              reduce using rule 26 (stmtlist -> stmtlist stmt .)
    PRINT           reduce using rule 26 (stmtlist -> stmtlist stmt .)
    ID              reduce using rule 26 (stmtlist -> stmtlist stmt .)
    LRB             reduce using rule 26 (stmtlist -> stmtlist stmt .)
    SUB             reduce using rule 26 (stmtlist -> stmtlist stmt .)
    NOT             reduce using rule 26 (stmtlist -> stmtlist stmt .)
    LCB             reduce using rule 26 (stmtlist -> stmtlist stmt .)
    INTEGERNUMBER   reduce using rule 26 (stmtlist -> stmtlist stmt .)
    FLOATNUMBER     reduce using rule 26 (stmtlist -> stmtlist stmt .)
    TRUE            reduce using rule 26 (stmtlist -> stmtlist stmt .)
    FALSE           reduce using rule 26 (stmtlist -> stmtlist stmt .)


state 90

    (30) stmt -> RETURN . exp SEMICOLON
    (41) exp -> . lvalue ASSIGN exp
    (42) exp -> . exp operator exp
    (43) exp -> . exp relop exp
    (44) exp -> . const
    (45) exp -> . lvalue
    (46) exp -> . ID LRB explist RRB
    (47) exp -> . LRB exp RRB
    (48) exp -> . ID LRB RRB
    (49) exp -> . SUB exp
    (50) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (58) const -> . INTEGERNUMBER
    (59) const -> . FLOATNUMBER
    (60) const -> . TRUE
    (61) const -> . FALSE

    ID              shift and go to state 32
    LRB             shift and go to state 36
    SUB             shift and go to state 37
    NOT             shift and go to state 38
    INTEGERNUMBER   shift and go to state 39
    FLOATNUMBER     shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42

    exp                            shift and go to state 101
    lvalue                         shift and go to state 34
    const                          shift and go to state 35

state 91

    (31) stmt -> exp . SEMICOLON
    (42) exp -> exp . operator exp
    (43) exp -> exp . relop exp
    (51) operator -> . OR
    (52) operator -> . AND
    (53) operator -> . SUM
    (54) operator -> . SUB
    (55) operator -> . MUL
    (56) operator -> . DIV
    (57) operator -> . MOD
    (62) relop -> . GT
    (63) relop -> . LT
    (64) relop -> . NE
    (65) relop -> . EQ
    (66) relop -> . GE
    (67) relop -> . LE

    SEMICOLON       shift and go to state 102
    OR              shift and go to state 56
    AND             shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    GE              shift and go to state 67
    LE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 92

    (32) stmt -> block .

    RCB             reduce using rule 32 (stmt -> block .)
    RETURN          reduce using rule 32 (stmt -> block .)
    WHILE           reduce using rule 32 (stmt -> block .)
    FOR             reduce using rule 32 (stmt -> block .)
    IF              reduce using rule 32 (stmt -> block .)
    PRINT           reduce using rule 32 (stmt -> block .)
    ID              reduce using rule 32 (stmt -> block .)
    LRB             reduce using rule 32 (stmt -> block .)
    SUB             reduce using rule 32 (stmt -> block .)
    NOT             reduce using rule 32 (stmt -> block .)
    LCB             reduce using rule 32 (stmt -> block .)
    INTEGERNUMBER   reduce using rule 32 (stmt -> block .)
    FLOATNUMBER     reduce using rule 32 (stmt -> block .)
    TRUE            reduce using rule 32 (stmt -> block .)
    FALSE           reduce using rule 32 (stmt -> block .)
    ELIF            reduce using rule 32 (stmt -> block .)
    ELSE            reduce using rule 32 (stmt -> block .)


state 93

    (33) stmt -> WHILE . LRB exp RRB stmt

    LRB             shift and go to state 103


state 94

    (34) stmt -> FOR . LRB exp SEMICOLON exp SEMICOLON exp RRB stmt

    LRB             shift and go to state 104


state 95

    (35) stmt -> IF . LRB exp RRB stmt elseiflist other

    LRB             shift and go to state 105


state 96

    (36) stmt -> PRINT . LRB ID RRB SEMICOLON

    LRB             shift and go to state 106


state 97

    (22) paramdec -> type ID LSB RSB .

    COMMA           reduce using rule 22 (paramdec -> type ID LSB RSB .)
    RRB             reduce using rule 22 (paramdec -> type ID LSB RSB .)


state 98

    (46) exp -> ID LRB explist RRB .

    RSB             reduce using rule 46 (exp -> ID LRB explist RRB .)
    OR              reduce using rule 46 (exp -> ID LRB explist RRB .)
    AND             reduce using rule 46 (exp -> ID LRB explist RRB .)
    SUM             reduce using rule 46 (exp -> ID LRB explist RRB .)
    SUB             reduce using rule 46 (exp -> ID LRB explist RRB .)
    MUL             reduce using rule 46 (exp -> ID LRB explist RRB .)
    DIV             reduce using rule 46 (exp -> ID LRB explist RRB .)
    MOD             reduce using rule 46 (exp -> ID LRB explist RRB .)
    GT              reduce using rule 46 (exp -> ID LRB explist RRB .)
    LT              reduce using rule 46 (exp -> ID LRB explist RRB .)
    NE              reduce using rule 46 (exp -> ID LRB explist RRB .)
    EQ              reduce using rule 46 (exp -> ID LRB explist RRB .)
    GE              reduce using rule 46 (exp -> ID LRB explist RRB .)
    LE              reduce using rule 46 (exp -> ID LRB explist RRB .)
    SEMICOLON       reduce using rule 46 (exp -> ID LRB explist RRB .)
    COMMA           reduce using rule 46 (exp -> ID LRB explist RRB .)
    RRB             reduce using rule 46 (exp -> ID LRB explist RRB .)


state 99

    (69) explist -> explist COMMA . exp
    (41) exp -> . lvalue ASSIGN exp
    (42) exp -> . exp operator exp
    (43) exp -> . exp relop exp
    (44) exp -> . const
    (45) exp -> . lvalue
    (46) exp -> . ID LRB explist RRB
    (47) exp -> . LRB exp RRB
    (48) exp -> . ID LRB RRB
    (49) exp -> . SUB exp
    (50) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (58) const -> . INTEGERNUMBER
    (59) const -> . FLOATNUMBER
    (60) const -> . TRUE
    (61) const -> . FALSE

    ID              shift and go to state 32
    LRB             shift and go to state 36
    SUB             shift and go to state 37
    NOT             shift and go to state 38
    INTEGERNUMBER   shift and go to state 39
    FLOATNUMBER     shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42

    exp                            shift and go to state 107
    lvalue                         shift and go to state 34
    const                          shift and go to state 35

state 100

    (29) lvalue -> ID LSB exp RSB .

    ASSIGN          reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    RSB             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    OR              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    AND             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    SUM             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    SUB             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    MUL             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    DIV             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    MOD             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    GT              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    LT              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    NE              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    EQ              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    GE              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    LE              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    SEMICOLON       reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    COMMA           reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    RRB             reduce using rule 29 (lvalue -> ID LSB exp RSB .)


state 101

    (30) stmt -> RETURN exp . SEMICOLON
    (42) exp -> exp . operator exp
    (43) exp -> exp . relop exp
    (51) operator -> . OR
    (52) operator -> . AND
    (53) operator -> . SUM
    (54) operator -> . SUB
    (55) operator -> . MUL
    (56) operator -> . DIV
    (57) operator -> . MOD
    (62) relop -> . GT
    (63) relop -> . LT
    (64) relop -> . NE
    (65) relop -> . EQ
    (66) relop -> . GE
    (67) relop -> . LE

    SEMICOLON       shift and go to state 108
    OR              shift and go to state 56
    AND             shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    GE              shift and go to state 67
    LE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 102

    (31) stmt -> exp SEMICOLON .

    RCB             reduce using rule 31 (stmt -> exp SEMICOLON .)
    RETURN          reduce using rule 31 (stmt -> exp SEMICOLON .)
    WHILE           reduce using rule 31 (stmt -> exp SEMICOLON .)
    FOR             reduce using rule 31 (stmt -> exp SEMICOLON .)
    IF              reduce using rule 31 (stmt -> exp SEMICOLON .)
    PRINT           reduce using rule 31 (stmt -> exp SEMICOLON .)
    ID              reduce using rule 31 (stmt -> exp SEMICOLON .)
    LRB             reduce using rule 31 (stmt -> exp SEMICOLON .)
    SUB             reduce using rule 31 (stmt -> exp SEMICOLON .)
    NOT             reduce using rule 31 (stmt -> exp SEMICOLON .)
    LCB             reduce using rule 31 (stmt -> exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 31 (stmt -> exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 31 (stmt -> exp SEMICOLON .)
    TRUE            reduce using rule 31 (stmt -> exp SEMICOLON .)
    FALSE           reduce using rule 31 (stmt -> exp SEMICOLON .)
    ELIF            reduce using rule 31 (stmt -> exp SEMICOLON .)
    ELSE            reduce using rule 31 (stmt -> exp SEMICOLON .)


state 103

    (33) stmt -> WHILE LRB . exp RRB stmt
    (41) exp -> . lvalue ASSIGN exp
    (42) exp -> . exp operator exp
    (43) exp -> . exp relop exp
    (44) exp -> . const
    (45) exp -> . lvalue
    (46) exp -> . ID LRB explist RRB
    (47) exp -> . LRB exp RRB
    (48) exp -> . ID LRB RRB
    (49) exp -> . SUB exp
    (50) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (58) const -> . INTEGERNUMBER
    (59) const -> . FLOATNUMBER
    (60) const -> . TRUE
    (61) const -> . FALSE

    ID              shift and go to state 32
    LRB             shift and go to state 36
    SUB             shift and go to state 37
    NOT             shift and go to state 38
    INTEGERNUMBER   shift and go to state 39
    FLOATNUMBER     shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42

    exp                            shift and go to state 109
    lvalue                         shift and go to state 34
    const                          shift and go to state 35

state 104

    (34) stmt -> FOR LRB . exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) exp -> . lvalue ASSIGN exp
    (42) exp -> . exp operator exp
    (43) exp -> . exp relop exp
    (44) exp -> . const
    (45) exp -> . lvalue
    (46) exp -> . ID LRB explist RRB
    (47) exp -> . LRB exp RRB
    (48) exp -> . ID LRB RRB
    (49) exp -> . SUB exp
    (50) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (58) const -> . INTEGERNUMBER
    (59) const -> . FLOATNUMBER
    (60) const -> . TRUE
    (61) const -> . FALSE

    ID              shift and go to state 32
    LRB             shift and go to state 36
    SUB             shift and go to state 37
    NOT             shift and go to state 38
    INTEGERNUMBER   shift and go to state 39
    FLOATNUMBER     shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42

    exp                            shift and go to state 110
    lvalue                         shift and go to state 34
    const                          shift and go to state 35

state 105

    (35) stmt -> IF LRB . exp RRB stmt elseiflist other
    (41) exp -> . lvalue ASSIGN exp
    (42) exp -> . exp operator exp
    (43) exp -> . exp relop exp
    (44) exp -> . const
    (45) exp -> . lvalue
    (46) exp -> . ID LRB explist RRB
    (47) exp -> . LRB exp RRB
    (48) exp -> . ID LRB RRB
    (49) exp -> . SUB exp
    (50) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (58) const -> . INTEGERNUMBER
    (59) const -> . FLOATNUMBER
    (60) const -> . TRUE
    (61) const -> . FALSE

    ID              shift and go to state 32
    LRB             shift and go to state 36
    SUB             shift and go to state 37
    NOT             shift and go to state 38
    INTEGERNUMBER   shift and go to state 39
    FLOATNUMBER     shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42

    exp                            shift and go to state 111
    lvalue                         shift and go to state 34
    const                          shift and go to state 35

state 106

    (36) stmt -> PRINT LRB . ID RRB SEMICOLON

    ID              shift and go to state 112


state 107

    (69) explist -> explist COMMA exp .
    (42) exp -> exp . operator exp
    (43) exp -> exp . relop exp
    (51) operator -> . OR
    (52) operator -> . AND
    (53) operator -> . SUM
    (54) operator -> . SUB
    (55) operator -> . MUL
    (56) operator -> . DIV
    (57) operator -> . MOD
    (62) relop -> . GT
    (63) relop -> . LT
    (64) relop -> . NE
    (65) relop -> . EQ
    (66) relop -> . GE
    (67) relop -> . LE

    RRB             reduce using rule 69 (explist -> explist COMMA exp .)
    COMMA           reduce using rule 69 (explist -> explist COMMA exp .)
    OR              shift and go to state 56
    AND             shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    GE              shift and go to state 67
    LE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 108

    (30) stmt -> RETURN exp SEMICOLON .

    RCB             reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    RETURN          reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    WHILE           reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    FOR             reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    IF              reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    PRINT           reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    ID              reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    LRB             reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    SUB             reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    NOT             reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    LCB             reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    TRUE            reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    FALSE           reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    ELIF            reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    ELSE            reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)


state 109

    (33) stmt -> WHILE LRB exp . RRB stmt
    (42) exp -> exp . operator exp
    (43) exp -> exp . relop exp
    (51) operator -> . OR
    (52) operator -> . AND
    (53) operator -> . SUM
    (54) operator -> . SUB
    (55) operator -> . MUL
    (56) operator -> . DIV
    (57) operator -> . MOD
    (62) relop -> . GT
    (63) relop -> . LT
    (64) relop -> . NE
    (65) relop -> . EQ
    (66) relop -> . GE
    (67) relop -> . LE

    RRB             shift and go to state 113
    OR              shift and go to state 56
    AND             shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    GE              shift and go to state 67
    LE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 110

    (34) stmt -> FOR LRB exp . SEMICOLON exp SEMICOLON exp RRB stmt
    (42) exp -> exp . operator exp
    (43) exp -> exp . relop exp
    (51) operator -> . OR
    (52) operator -> . AND
    (53) operator -> . SUM
    (54) operator -> . SUB
    (55) operator -> . MUL
    (56) operator -> . DIV
    (57) operator -> . MOD
    (62) relop -> . GT
    (63) relop -> . LT
    (64) relop -> . NE
    (65) relop -> . EQ
    (66) relop -> . GE
    (67) relop -> . LE

    SEMICOLON       shift and go to state 114
    OR              shift and go to state 56
    AND             shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    GE              shift and go to state 67
    LE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 111

    (35) stmt -> IF LRB exp . RRB stmt elseiflist other
    (42) exp -> exp . operator exp
    (43) exp -> exp . relop exp
    (51) operator -> . OR
    (52) operator -> . AND
    (53) operator -> . SUM
    (54) operator -> . SUB
    (55) operator -> . MUL
    (56) operator -> . DIV
    (57) operator -> . MOD
    (62) relop -> . GT
    (63) relop -> . LT
    (64) relop -> . NE
    (65) relop -> . EQ
    (66) relop -> . GE
    (67) relop -> . LE

    RRB             shift and go to state 115
    OR              shift and go to state 56
    AND             shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    GE              shift and go to state 67
    LE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 112

    (36) stmt -> PRINT LRB ID . RRB SEMICOLON

    RRB             shift and go to state 116


state 113

    (33) stmt -> WHILE LRB exp RRB . stmt
    (30) stmt -> . RETURN exp SEMICOLON
    (31) stmt -> . exp SEMICOLON
    (32) stmt -> . block
    (33) stmt -> . WHILE LRB exp RRB stmt
    (34) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (35) stmt -> . IF LRB exp RRB stmt elseiflist other
    (36) stmt -> . PRINT LRB ID RRB SEMICOLON
    (41) exp -> . lvalue ASSIGN exp
    (42) exp -> . exp operator exp
    (43) exp -> . exp relop exp
    (44) exp -> . const
    (45) exp -> . lvalue
    (46) exp -> . ID LRB explist RRB
    (47) exp -> . LRB exp RRB
    (48) exp -> . ID LRB RRB
    (49) exp -> . SUB exp
    (50) exp -> . NOT exp
    (25) block -> . LCB varlist stmtlist RCB
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (58) const -> . INTEGERNUMBER
    (59) const -> . FLOATNUMBER
    (60) const -> . TRUE
    (61) const -> . FALSE

    RETURN          shift and go to state 90
    WHILE           shift and go to state 93
    FOR             shift and go to state 94
    IF              shift and go to state 95
    PRINT           shift and go to state 96
    ID              shift and go to state 32
    LRB             shift and go to state 36
    SUB             shift and go to state 37
    NOT             shift and go to state 38
    LCB             shift and go to state 25
    INTEGERNUMBER   shift and go to state 39
    FLOATNUMBER     shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42

    exp                            shift and go to state 91
    stmt                           shift and go to state 117
    block                          shift and go to state 92
    lvalue                         shift and go to state 34
    const                          shift and go to state 35

state 114

    (34) stmt -> FOR LRB exp SEMICOLON . exp SEMICOLON exp RRB stmt
    (41) exp -> . lvalue ASSIGN exp
    (42) exp -> . exp operator exp
    (43) exp -> . exp relop exp
    (44) exp -> . const
    (45) exp -> . lvalue
    (46) exp -> . ID LRB explist RRB
    (47) exp -> . LRB exp RRB
    (48) exp -> . ID LRB RRB
    (49) exp -> . SUB exp
    (50) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (58) const -> . INTEGERNUMBER
    (59) const -> . FLOATNUMBER
    (60) const -> . TRUE
    (61) const -> . FALSE

    ID              shift and go to state 32
    LRB             shift and go to state 36
    SUB             shift and go to state 37
    NOT             shift and go to state 38
    INTEGERNUMBER   shift and go to state 39
    FLOATNUMBER     shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42

    exp                            shift and go to state 118
    lvalue                         shift and go to state 34
    const                          shift and go to state 35

state 115

    (35) stmt -> IF LRB exp RRB . stmt elseiflist other
    (30) stmt -> . RETURN exp SEMICOLON
    (31) stmt -> . exp SEMICOLON
    (32) stmt -> . block
    (33) stmt -> . WHILE LRB exp RRB stmt
    (34) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (35) stmt -> . IF LRB exp RRB stmt elseiflist other
    (36) stmt -> . PRINT LRB ID RRB SEMICOLON
    (41) exp -> . lvalue ASSIGN exp
    (42) exp -> . exp operator exp
    (43) exp -> . exp relop exp
    (44) exp -> . const
    (45) exp -> . lvalue
    (46) exp -> . ID LRB explist RRB
    (47) exp -> . LRB exp RRB
    (48) exp -> . ID LRB RRB
    (49) exp -> . SUB exp
    (50) exp -> . NOT exp
    (25) block -> . LCB varlist stmtlist RCB
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (58) const -> . INTEGERNUMBER
    (59) const -> . FLOATNUMBER
    (60) const -> . TRUE
    (61) const -> . FALSE

    RETURN          shift and go to state 90
    WHILE           shift and go to state 93
    FOR             shift and go to state 94
    IF              shift and go to state 95
    PRINT           shift and go to state 96
    ID              shift and go to state 32
    LRB             shift and go to state 36
    SUB             shift and go to state 37
    NOT             shift and go to state 38
    LCB             shift and go to state 25
    INTEGERNUMBER   shift and go to state 39
    FLOATNUMBER     shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42

    exp                            shift and go to state 91
    stmt                           shift and go to state 119
    block                          shift and go to state 92
    lvalue                         shift and go to state 34
    const                          shift and go to state 35

state 116

    (36) stmt -> PRINT LRB ID RRB . SEMICOLON

    SEMICOLON       shift and go to state 120


state 117

    (33) stmt -> WHILE LRB exp RRB stmt .

    RCB             reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    RETURN          reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    WHILE           reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    FOR             reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    IF              reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    PRINT           reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    ID              reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    LRB             reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    SUB             reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    NOT             reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    LCB             reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    TRUE            reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    FALSE           reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    ELIF            reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    ELSE            reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)


state 118

    (34) stmt -> FOR LRB exp SEMICOLON exp . SEMICOLON exp RRB stmt
    (42) exp -> exp . operator exp
    (43) exp -> exp . relop exp
    (51) operator -> . OR
    (52) operator -> . AND
    (53) operator -> . SUM
    (54) operator -> . SUB
    (55) operator -> . MUL
    (56) operator -> . DIV
    (57) operator -> . MOD
    (62) relop -> . GT
    (63) relop -> . LT
    (64) relop -> . NE
    (65) relop -> . EQ
    (66) relop -> . GE
    (67) relop -> . LE

    SEMICOLON       shift and go to state 121
    OR              shift and go to state 56
    AND             shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    GE              shift and go to state 67
    LE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 119

    (35) stmt -> IF LRB exp RRB stmt . elseiflist other
    (39) elseiflist -> . elseiflist ELIF LRB exp RRB stmt
    (40) elseiflist -> .

    RCB             reduce using rule 40 (elseiflist -> .)
    RETURN          reduce using rule 40 (elseiflist -> .)
    WHILE           reduce using rule 40 (elseiflist -> .)
    FOR             reduce using rule 40 (elseiflist -> .)
    IF              reduce using rule 40 (elseiflist -> .)
    PRINT           reduce using rule 40 (elseiflist -> .)
    ID              reduce using rule 40 (elseiflist -> .)
    LRB             reduce using rule 40 (elseiflist -> .)
    SUB             reduce using rule 40 (elseiflist -> .)
    NOT             reduce using rule 40 (elseiflist -> .)
    LCB             reduce using rule 40 (elseiflist -> .)
    INTEGERNUMBER   reduce using rule 40 (elseiflist -> .)
    FLOATNUMBER     reduce using rule 40 (elseiflist -> .)
    TRUE            reduce using rule 40 (elseiflist -> .)
    FALSE           reduce using rule 40 (elseiflist -> .)
    ELIF            reduce using rule 40 (elseiflist -> .)
    ELSE            reduce using rule 40 (elseiflist -> .)

    elseiflist                     shift and go to state 122

state 120

    (36) stmt -> PRINT LRB ID RRB SEMICOLON .

    RCB             reduce using rule 36 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    RETURN          reduce using rule 36 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    WHILE           reduce using rule 36 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FOR             reduce using rule 36 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    IF              reduce using rule 36 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    PRINT           reduce using rule 36 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ID              reduce using rule 36 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    LRB             reduce using rule 36 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    SUB             reduce using rule 36 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    NOT             reduce using rule 36 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    LCB             reduce using rule 36 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 36 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FLOATNUMBER     reduce using rule 36 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    TRUE            reduce using rule 36 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FALSE           reduce using rule 36 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ELIF            reduce using rule 36 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ELSE            reduce using rule 36 (stmt -> PRINT LRB ID RRB SEMICOLON .)


state 121

    (34) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON . exp RRB stmt
    (41) exp -> . lvalue ASSIGN exp
    (42) exp -> . exp operator exp
    (43) exp -> . exp relop exp
    (44) exp -> . const
    (45) exp -> . lvalue
    (46) exp -> . ID LRB explist RRB
    (47) exp -> . LRB exp RRB
    (48) exp -> . ID LRB RRB
    (49) exp -> . SUB exp
    (50) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (58) const -> . INTEGERNUMBER
    (59) const -> . FLOATNUMBER
    (60) const -> . TRUE
    (61) const -> . FALSE

    ID              shift and go to state 32
    LRB             shift and go to state 36
    SUB             shift and go to state 37
    NOT             shift and go to state 38
    INTEGERNUMBER   shift and go to state 39
    FLOATNUMBER     shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42

    exp                            shift and go to state 123
    lvalue                         shift and go to state 34
    const                          shift and go to state 35

state 122

    (35) stmt -> IF LRB exp RRB stmt elseiflist . other
    (39) elseiflist -> elseiflist . ELIF LRB exp RRB stmt
    (37) other -> . ELSE stmt
    (38) other -> .

    ELIF            shift and go to state 125
    ELSE            shift and go to state 126
    RCB             reduce using rule 38 (other -> .)
    RETURN          reduce using rule 38 (other -> .)
    WHILE           reduce using rule 38 (other -> .)
    FOR             reduce using rule 38 (other -> .)
    IF              reduce using rule 38 (other -> .)
    PRINT           reduce using rule 38 (other -> .)
    ID              reduce using rule 38 (other -> .)
    LRB             reduce using rule 38 (other -> .)
    SUB             reduce using rule 38 (other -> .)
    NOT             reduce using rule 38 (other -> .)
    LCB             reduce using rule 38 (other -> .)
    INTEGERNUMBER   reduce using rule 38 (other -> .)
    FLOATNUMBER     reduce using rule 38 (other -> .)
    TRUE            reduce using rule 38 (other -> .)
    FALSE           reduce using rule 38 (other -> .)

  ! ELIF            [ reduce using rule 38 (other -> .) ]
  ! ELSE            [ reduce using rule 38 (other -> .) ]

    other                          shift and go to state 124

state 123

    (34) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp . RRB stmt
    (42) exp -> exp . operator exp
    (43) exp -> exp . relop exp
    (51) operator -> . OR
    (52) operator -> . AND
    (53) operator -> . SUM
    (54) operator -> . SUB
    (55) operator -> . MUL
    (56) operator -> . DIV
    (57) operator -> . MOD
    (62) relop -> . GT
    (63) relop -> . LT
    (64) relop -> . NE
    (65) relop -> . EQ
    (66) relop -> . GE
    (67) relop -> . LE

    RRB             shift and go to state 127
    OR              shift and go to state 56
    AND             shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    GE              shift and go to state 67
    LE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 124

    (35) stmt -> IF LRB exp RRB stmt elseiflist other .

    RCB             reduce using rule 35 (stmt -> IF LRB exp RRB stmt elseiflist other .)
    RETURN          reduce using rule 35 (stmt -> IF LRB exp RRB stmt elseiflist other .)
    WHILE           reduce using rule 35 (stmt -> IF LRB exp RRB stmt elseiflist other .)
    FOR             reduce using rule 35 (stmt -> IF LRB exp RRB stmt elseiflist other .)
    IF              reduce using rule 35 (stmt -> IF LRB exp RRB stmt elseiflist other .)
    PRINT           reduce using rule 35 (stmt -> IF LRB exp RRB stmt elseiflist other .)
    ID              reduce using rule 35 (stmt -> IF LRB exp RRB stmt elseiflist other .)
    LRB             reduce using rule 35 (stmt -> IF LRB exp RRB stmt elseiflist other .)
    SUB             reduce using rule 35 (stmt -> IF LRB exp RRB stmt elseiflist other .)
    NOT             reduce using rule 35 (stmt -> IF LRB exp RRB stmt elseiflist other .)
    LCB             reduce using rule 35 (stmt -> IF LRB exp RRB stmt elseiflist other .)
    INTEGERNUMBER   reduce using rule 35 (stmt -> IF LRB exp RRB stmt elseiflist other .)
    FLOATNUMBER     reduce using rule 35 (stmt -> IF LRB exp RRB stmt elseiflist other .)
    TRUE            reduce using rule 35 (stmt -> IF LRB exp RRB stmt elseiflist other .)
    FALSE           reduce using rule 35 (stmt -> IF LRB exp RRB stmt elseiflist other .)
    ELIF            reduce using rule 35 (stmt -> IF LRB exp RRB stmt elseiflist other .)
    ELSE            reduce using rule 35 (stmt -> IF LRB exp RRB stmt elseiflist other .)


state 125

    (39) elseiflist -> elseiflist ELIF . LRB exp RRB stmt

    LRB             shift and go to state 128


state 126

    (37) other -> ELSE . stmt
    (30) stmt -> . RETURN exp SEMICOLON
    (31) stmt -> . exp SEMICOLON
    (32) stmt -> . block
    (33) stmt -> . WHILE LRB exp RRB stmt
    (34) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (35) stmt -> . IF LRB exp RRB stmt elseiflist other
    (36) stmt -> . PRINT LRB ID RRB SEMICOLON
    (41) exp -> . lvalue ASSIGN exp
    (42) exp -> . exp operator exp
    (43) exp -> . exp relop exp
    (44) exp -> . const
    (45) exp -> . lvalue
    (46) exp -> . ID LRB explist RRB
    (47) exp -> . LRB exp RRB
    (48) exp -> . ID LRB RRB
    (49) exp -> . SUB exp
    (50) exp -> . NOT exp
    (25) block -> . LCB varlist stmtlist RCB
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (58) const -> . INTEGERNUMBER
    (59) const -> . FLOATNUMBER
    (60) const -> . TRUE
    (61) const -> . FALSE

    RETURN          shift and go to state 90
    WHILE           shift and go to state 93
    FOR             shift and go to state 94
    IF              shift and go to state 95
    PRINT           shift and go to state 96
    ID              shift and go to state 32
    LRB             shift and go to state 36
    SUB             shift and go to state 37
    NOT             shift and go to state 38
    LCB             shift and go to state 25
    INTEGERNUMBER   shift and go to state 39
    FLOATNUMBER     shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42

    stmt                           shift and go to state 129
    exp                            shift and go to state 91
    block                          shift and go to state 92
    lvalue                         shift and go to state 34
    const                          shift and go to state 35

state 127

    (34) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB . stmt
    (30) stmt -> . RETURN exp SEMICOLON
    (31) stmt -> . exp SEMICOLON
    (32) stmt -> . block
    (33) stmt -> . WHILE LRB exp RRB stmt
    (34) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (35) stmt -> . IF LRB exp RRB stmt elseiflist other
    (36) stmt -> . PRINT LRB ID RRB SEMICOLON
    (41) exp -> . lvalue ASSIGN exp
    (42) exp -> . exp operator exp
    (43) exp -> . exp relop exp
    (44) exp -> . const
    (45) exp -> . lvalue
    (46) exp -> . ID LRB explist RRB
    (47) exp -> . LRB exp RRB
    (48) exp -> . ID LRB RRB
    (49) exp -> . SUB exp
    (50) exp -> . NOT exp
    (25) block -> . LCB varlist stmtlist RCB
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (58) const -> . INTEGERNUMBER
    (59) const -> . FLOATNUMBER
    (60) const -> . TRUE
    (61) const -> . FALSE

    RETURN          shift and go to state 90
    WHILE           shift and go to state 93
    FOR             shift and go to state 94
    IF              shift and go to state 95
    PRINT           shift and go to state 96
    ID              shift and go to state 32
    LRB             shift and go to state 36
    SUB             shift and go to state 37
    NOT             shift and go to state 38
    LCB             shift and go to state 25
    INTEGERNUMBER   shift and go to state 39
    FLOATNUMBER     shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42

    exp                            shift and go to state 91
    stmt                           shift and go to state 130
    block                          shift and go to state 92
    lvalue                         shift and go to state 34
    const                          shift and go to state 35

state 128

    (39) elseiflist -> elseiflist ELIF LRB . exp RRB stmt
    (41) exp -> . lvalue ASSIGN exp
    (42) exp -> . exp operator exp
    (43) exp -> . exp relop exp
    (44) exp -> . const
    (45) exp -> . lvalue
    (46) exp -> . ID LRB explist RRB
    (47) exp -> . LRB exp RRB
    (48) exp -> . ID LRB RRB
    (49) exp -> . SUB exp
    (50) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (58) const -> . INTEGERNUMBER
    (59) const -> . FLOATNUMBER
    (60) const -> . TRUE
    (61) const -> . FALSE

    ID              shift and go to state 32
    LRB             shift and go to state 36
    SUB             shift and go to state 37
    NOT             shift and go to state 38
    INTEGERNUMBER   shift and go to state 39
    FLOATNUMBER     shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42

    exp                            shift and go to state 131
    lvalue                         shift and go to state 34
    const                          shift and go to state 35

state 129

    (37) other -> ELSE stmt .

    RCB             reduce using rule 37 (other -> ELSE stmt .)
    RETURN          reduce using rule 37 (other -> ELSE stmt .)
    WHILE           reduce using rule 37 (other -> ELSE stmt .)
    FOR             reduce using rule 37 (other -> ELSE stmt .)
    IF              reduce using rule 37 (other -> ELSE stmt .)
    PRINT           reduce using rule 37 (other -> ELSE stmt .)
    ID              reduce using rule 37 (other -> ELSE stmt .)
    LRB             reduce using rule 37 (other -> ELSE stmt .)
    SUB             reduce using rule 37 (other -> ELSE stmt .)
    NOT             reduce using rule 37 (other -> ELSE stmt .)
    LCB             reduce using rule 37 (other -> ELSE stmt .)
    INTEGERNUMBER   reduce using rule 37 (other -> ELSE stmt .)
    FLOATNUMBER     reduce using rule 37 (other -> ELSE stmt .)
    TRUE            reduce using rule 37 (other -> ELSE stmt .)
    FALSE           reduce using rule 37 (other -> ELSE stmt .)
    ELIF            reduce using rule 37 (other -> ELSE stmt .)
    ELSE            reduce using rule 37 (other -> ELSE stmt .)


state 130

    (34) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .

    RCB             reduce using rule 34 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    RETURN          reduce using rule 34 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    WHILE           reduce using rule 34 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FOR             reduce using rule 34 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    IF              reduce using rule 34 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    PRINT           reduce using rule 34 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ID              reduce using rule 34 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    LRB             reduce using rule 34 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    SUB             reduce using rule 34 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    NOT             reduce using rule 34 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    LCB             reduce using rule 34 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 34 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FLOATNUMBER     reduce using rule 34 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    TRUE            reduce using rule 34 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FALSE           reduce using rule 34 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ELIF            reduce using rule 34 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ELSE            reduce using rule 34 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)


state 131

    (39) elseiflist -> elseiflist ELIF LRB exp . RRB stmt
    (42) exp -> exp . operator exp
    (43) exp -> exp . relop exp
    (51) operator -> . OR
    (52) operator -> . AND
    (53) operator -> . SUM
    (54) operator -> . SUB
    (55) operator -> . MUL
    (56) operator -> . DIV
    (57) operator -> . MOD
    (62) relop -> . GT
    (63) relop -> . LT
    (64) relop -> . NE
    (65) relop -> . EQ
    (66) relop -> . GE
    (67) relop -> . LE

    RRB             shift and go to state 132
    OR              shift and go to state 56
    AND             shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    GE              shift and go to state 67
    LE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 132

    (39) elseiflist -> elseiflist ELIF LRB exp RRB . stmt
    (30) stmt -> . RETURN exp SEMICOLON
    (31) stmt -> . exp SEMICOLON
    (32) stmt -> . block
    (33) stmt -> . WHILE LRB exp RRB stmt
    (34) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (35) stmt -> . IF LRB exp RRB stmt elseiflist other
    (36) stmt -> . PRINT LRB ID RRB SEMICOLON
    (41) exp -> . lvalue ASSIGN exp
    (42) exp -> . exp operator exp
    (43) exp -> . exp relop exp
    (44) exp -> . const
    (45) exp -> . lvalue
    (46) exp -> . ID LRB explist RRB
    (47) exp -> . LRB exp RRB
    (48) exp -> . ID LRB RRB
    (49) exp -> . SUB exp
    (50) exp -> . NOT exp
    (25) block -> . LCB varlist stmtlist RCB
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (58) const -> . INTEGERNUMBER
    (59) const -> . FLOATNUMBER
    (60) const -> . TRUE
    (61) const -> . FALSE

    RETURN          shift and go to state 90
    WHILE           shift and go to state 93
    FOR             shift and go to state 94
    IF              shift and go to state 95
    PRINT           shift and go to state 96
    ID              shift and go to state 32
    LRB             shift and go to state 36
    SUB             shift and go to state 37
    NOT             shift and go to state 38
    LCB             shift and go to state 25
    INTEGERNUMBER   shift and go to state 39
    FLOATNUMBER     shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42

    exp                            shift and go to state 91
    stmt                           shift and go to state 133
    block                          shift and go to state 92
    lvalue                         shift and go to state 34
    const                          shift and go to state 35

state 133

    (39) elseiflist -> elseiflist ELIF LRB exp RRB stmt .

    RCB             reduce using rule 39 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    RETURN          reduce using rule 39 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    WHILE           reduce using rule 39 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    FOR             reduce using rule 39 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    IF              reduce using rule 39 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    PRINT           reduce using rule 39 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    ID              reduce using rule 39 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    LRB             reduce using rule 39 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    SUB             reduce using rule 39 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    NOT             reduce using rule 39 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    LCB             reduce using rule 39 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 39 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 39 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    TRUE            reduce using rule 39 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    FALSE           reduce using rule 39 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    ELIF            reduce using rule 39 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    ELSE            reduce using rule 39 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OR in state 83 resolved as shift
WARNING: shift/reduce conflict for AND in state 83 resolved as shift
WARNING: shift/reduce conflict for SUM in state 83 resolved as shift
WARNING: shift/reduce conflict for SUB in state 83 resolved as shift
WARNING: shift/reduce conflict for MUL in state 83 resolved as shift
WARNING: shift/reduce conflict for DIV in state 83 resolved as shift
WARNING: shift/reduce conflict for MOD in state 83 resolved as shift
WARNING: shift/reduce conflict for GT in state 83 resolved as shift
WARNING: shift/reduce conflict for LT in state 83 resolved as shift
WARNING: shift/reduce conflict for NE in state 83 resolved as shift
WARNING: shift/reduce conflict for EQ in state 83 resolved as shift
WARNING: shift/reduce conflict for GE in state 83 resolved as shift
WARNING: shift/reduce conflict for LE in state 83 resolved as shift
WARNING: shift/reduce conflict for OR in state 84 resolved as shift
WARNING: shift/reduce conflict for AND in state 84 resolved as shift
WARNING: shift/reduce conflict for SUM in state 84 resolved as shift
WARNING: shift/reduce conflict for SUB in state 84 resolved as shift
WARNING: shift/reduce conflict for MUL in state 84 resolved as shift
WARNING: shift/reduce conflict for DIV in state 84 resolved as shift
WARNING: shift/reduce conflict for MOD in state 84 resolved as shift
WARNING: shift/reduce conflict for GT in state 84 resolved as shift
WARNING: shift/reduce conflict for LT in state 84 resolved as shift
WARNING: shift/reduce conflict for NE in state 84 resolved as shift
WARNING: shift/reduce conflict for EQ in state 84 resolved as shift
WARNING: shift/reduce conflict for GE in state 84 resolved as shift
WARNING: shift/reduce conflict for LE in state 84 resolved as shift
