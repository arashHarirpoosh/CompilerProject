
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCOMMArightASSIGNleftORleftANDleftEQNEleftGTGELTLEleftSUMSUBleftMULDIVMODrightNOTleftLCBLRBLSBRCBRRBRSBleftIFleftELIFELSEAND ASSIGN BOOLEAN COMMA DIV ELIF ELSE EQ ERROR FALSE FLOAT FLOATNUMBER FOR GE GT ID IF INTEGER INTEGERNUMBER LCB LE LRB LSB LT MAIN MOD MUL NE NOT OR PRINT RCB RETURN RRB RSB SEMICOLON SUB SUM TRUE VOID WHILE\n        program : declist MAIN LRB RRB block\n        \n        declist : declist dec\n        \n        declist :\n        \n        dec : vardec\n        \n        dec : funcdec\n        \n        type : INTEGER\n        \n        type : FLOAT\n        \n        type : BOOLEAN\n        \n        iddec : ID\n        \n        iddec : ID LSB exp RSB\n        \n        iddec : ID ASSIGN exp\n        \n        idlist : iddec\n        \n        idlist : idlist COMMA iddec\n        \n        vardec : type idlist SEMICOLON\n        \n        funcdec : type ID LRB paramdecs RRB block\n        \n        funcdec : VOID ID LRB paramdecs RRB block\n        \n        paramdecs : paramdecslist\n        \n        paramdecs :\n        \n        paramdecslist : paramdec\n        \n        paramdecslist : paramdecslist COMMA paramdec\n        \n        paramdec : type ID\n        \n        paramdec : type ID LSB RSB\n        \n        varlist : vardec varlist\n        \n        varlist :\n        \n        block : LCB varlist stmtlist RCB\n        \n        stmtlist : stmtlist stmt\n        \n        stmtlist :\n        \n        lvalue : ID\n        \n        lvalue : ID LSB exp RSB\n        \n        stmt : RETURN exp SEMICOLON\n        \n        stmt : exp SEMICOLON\n        \n        stmt : block\n        \n        stmt : WHILE LRB exp RRB stmt\n        \n        stmt : FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt\n        \n        stmt : IF LRB exp RRB stmt elseiflist other\n        \n        stmt : PRINT LRB ID RRB SEMICOLON\n        \n        other : ELSE stmt\n        \n        other : %prec IF\n        \n        elseiflist : elseiflist ELIF LRB exp RRB stmt\n        \n        elseiflist :\n        \n        exp : lvalue ASSIGN exp\n        \n        exp : exp operator exp %prec MUL\n        \n        exp : exp relop exp %prec GT\n        \n        exp : const\n        \n        exp : lvalue\n        \n        exp : ID LRB explist RRB\n        \n        exp : LRB exp RRB\n        \n        exp : ID LRB RRB\n        \n        exp : SUB exp\n        \n        exp : NOT exp\n        \n        operator : OR\n        \n        operator : AND\n        \n        operator : SUM\n        \n        operator : SUB\n        \n        operator : MUL\n        \n        operator : DIV\n        \n        operator : MOD\n        \n        const : INTEGERNUMBER\n        \n        const : FLOATNUMBER\n        \n        const : TRUE\n        \n        const : FALSE\n        \n        relop : GT\n        \n        relop : LT\n        \n        relop : NE\n        \n        relop : EQ\n        \n        relop : GE\n        \n        relop : LE\n        \n        explist : exp\n        \n        explist : explist COMMA exp\n        '
    
_lr_action_items = {'MAIN':([0,2,4,5,6,18,77,87,88,],[-3,3,-2,-4,-5,-14,-15,-16,-25,]),'VOID':([0,2,4,5,6,18,77,87,88,],[-3,8,-2,-4,-5,-14,-15,-16,-25,]),'INTEGER':([0,2,4,5,6,18,20,23,25,46,50,77,87,88,],[-3,9,-2,-4,-5,-14,9,9,9,9,9,-15,-16,-25,]),'FLOAT':([0,2,4,5,6,18,20,23,25,46,50,77,87,88,],[-3,10,-2,-4,-5,-14,10,10,10,10,10,-15,-16,-25,]),'BOOLEAN':([0,2,4,5,6,18,20,23,25,46,50,77,87,88,],[-3,11,-2,-4,-5,-14,11,11,11,11,11,-15,-16,-25,]),'$end':([1,24,88,],[0,-1,-25,]),'LRB':([3,14,16,18,21,22,25,32,36,37,38,45,46,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,88,89,90,92,93,94,95,96,99,102,103,104,105,108,113,114,115,117,119,120,121,122,124,125,126,127,128,129,130,132,133,],[12,20,23,-14,36,36,-24,51,36,36,36,-27,-24,36,36,36,36,-51,-52,-53,-54,-55,-56,-57,-62,-63,-64,-65,-66,-67,36,36,-23,-25,-26,36,-32,103,104,105,106,36,-31,36,36,36,-30,36,36,36,-33,-40,-36,36,-38,-35,128,36,36,36,-37,-34,36,-39,]),'ID':([7,8,9,10,11,18,19,21,22,25,28,36,37,38,45,46,47,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,88,89,90,92,99,102,103,104,105,106,108,113,114,115,117,119,120,121,122,124,126,127,128,129,130,132,133,],[14,16,-6,-7,-8,-14,27,32,32,-24,48,32,32,32,-27,-24,27,32,32,32,32,-51,-52,-53,-54,-55,-56,-57,-62,-63,-64,-65,-66,-67,32,32,-23,-25,-26,32,-32,32,-31,32,32,32,112,-30,32,32,32,-33,-40,-36,32,-38,-35,32,32,32,-37,-34,32,-39,]),'RRB':([12,20,23,29,30,31,32,34,35,39,40,41,42,44,48,51,70,71,72,78,79,80,81,83,84,85,86,97,98,100,107,109,111,112,123,131,],[17,-18,-18,49,-17,-19,-28,-45,-44,-58,-59,-60,-61,73,-21,80,86,-49,-50,-20,98,-48,-68,-42,-43,-41,-47,-22,-46,-29,-69,113,115,116,127,132,]),'SEMICOLON':([13,14,15,26,27,32,34,35,39,40,41,42,43,53,71,72,80,83,84,85,86,91,98,100,101,110,116,118,],[18,-9,-12,-13,-9,-28,-45,-44,-58,-59,-60,-61,-11,-10,-49,-50,-48,-42,-43,-41,-47,102,-46,-29,108,114,120,121,]),'COMMA':([13,14,15,26,27,30,31,32,34,35,39,40,41,42,43,48,53,71,72,78,79,80,81,83,84,85,86,97,98,100,107,],[19,-9,-12,-13,-9,50,-19,-28,-45,-44,-58,-59,-60,-61,-11,-21,-10,-49,-50,-20,99,-48,-68,-42,-43,-41,-47,-22,-46,-29,-69,]),'LSB':([14,27,32,48,],[21,21,52,76,]),'ASSIGN':([14,27,32,34,100,],[22,22,-28,69,-29,]),'LCB':([17,18,25,45,46,49,73,74,75,88,89,92,102,108,113,115,117,119,120,122,124,126,127,129,130,132,133,],[25,-14,-24,-27,-24,25,25,25,-23,-25,-26,-32,-31,-30,25,25,-33,-40,-36,-38,-35,25,25,-37,-34,25,-39,]),'RCB':([18,25,45,46,74,75,88,89,92,102,108,117,119,120,122,124,129,130,133,],[-14,-24,-27,-24,88,-23,-25,-26,-32,-31,-30,-33,-40,-36,-38,-35,-37,-34,-39,]),'RETURN':([18,25,45,46,74,75,88,89,92,102,108,113,115,117,119,120,122,124,126,127,129,130,132,133,],[-14,-24,-27,-24,90,-23,-25,-26,-32,-31,-30,90,90,-33,-40,-36,-38,-35,90,90,-37,-34,90,-39,]),'WHILE':([18,25,45,46,74,75,88,89,92,102,108,113,115,117,119,120,122,124,126,127,129,130,132,133,],[-14,-24,-27,-24,93,-23,-25,-26,-32,-31,-30,93,93,-33,-40,-36,-38,-35,93,93,-37,-34,93,-39,]),'FOR':([18,25,45,46,74,75,88,89,92,102,108,113,115,117,119,120,122,124,126,127,129,130,132,133,],[-14,-24,-27,-24,94,-23,-25,-26,-32,-31,-30,94,94,-33,-40,-36,-38,-35,94,94,-37,-34,94,-39,]),'IF':([18,25,45,46,74,75,88,89,92,102,108,113,115,117,119,120,122,124,126,127,129,130,132,133,],[-14,-24,-27,-24,95,-23,-25,-26,-32,-31,-30,95,95,-33,-40,-36,-38,-35,95,95,-37,-34,95,-39,]),'PRINT':([18,25,45,46,74,75,88,89,92,102,108,113,115,117,119,120,122,124,126,127,129,130,132,133,],[-14,-24,-27,-24,96,-23,-25,-26,-32,-31,-30,96,96,-33,-40,-36,-38,-35,96,96,-37,-34,96,-39,]),'SUB':([18,21,22,25,32,33,34,35,36,37,38,39,40,41,42,43,45,46,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75,80,81,82,83,84,85,86,88,89,90,91,92,98,99,100,101,102,103,104,105,107,108,109,110,111,113,114,115,117,118,119,120,121,122,123,124,126,127,128,129,130,131,132,133,],[-14,37,37,-24,-28,59,-45,-44,37,37,37,-58,-59,-60,-61,59,-27,-24,37,37,37,37,-51,-52,-53,-54,-55,-56,-57,-62,-63,-64,-65,-66,-67,37,59,-49,-50,37,-23,-48,59,59,-42,59,59,-47,-25,-26,37,59,-32,-46,37,-29,59,-31,37,37,37,59,-30,59,59,59,37,37,37,-33,59,-40,-36,37,-38,59,-35,37,37,37,-37,-34,59,37,-39,]),'NOT':([18,21,22,25,36,37,38,45,46,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,88,89,90,92,99,102,103,104,105,108,113,114,115,117,119,120,121,122,124,126,127,128,129,130,132,133,],[-14,38,38,-24,38,38,38,-27,-24,38,38,38,38,-51,-52,-53,-54,-55,-56,-57,-62,-63,-64,-65,-66,-67,38,38,-23,-25,-26,38,-32,38,-31,38,38,38,-30,38,38,38,-33,-40,-36,38,-38,-35,38,38,38,-37,-34,38,-39,]),'INTEGERNUMBER':([18,21,22,25,36,37,38,45,46,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,88,89,90,92,99,102,103,104,105,108,113,114,115,117,119,120,121,122,124,126,127,128,129,130,132,133,],[-14,39,39,-24,39,39,39,-27,-24,39,39,39,39,-51,-52,-53,-54,-55,-56,-57,-62,-63,-64,-65,-66,-67,39,39,-23,-25,-26,39,-32,39,-31,39,39,39,-30,39,39,39,-33,-40,-36,39,-38,-35,39,39,39,-37,-34,39,-39,]),'FLOATNUMBER':([18,21,22,25,36,37,38,45,46,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,88,89,90,92,99,102,103,104,105,108,113,114,115,117,119,120,121,122,124,126,127,128,129,130,132,133,],[-14,40,40,-24,40,40,40,-27,-24,40,40,40,40,-51,-52,-53,-54,-55,-56,-57,-62,-63,-64,-65,-66,-67,40,40,-23,-25,-26,40,-32,40,-31,40,40,40,-30,40,40,40,-33,-40,-36,40,-38,-35,40,40,40,-37,-34,40,-39,]),'TRUE':([18,21,22,25,36,37,38,45,46,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,88,89,90,92,99,102,103,104,105,108,113,114,115,117,119,120,121,122,124,126,127,128,129,130,132,133,],[-14,41,41,-24,41,41,41,-27,-24,41,41,41,41,-51,-52,-53,-54,-55,-56,-57,-62,-63,-64,-65,-66,-67,41,41,-23,-25,-26,41,-32,41,-31,41,41,41,-30,41,41,41,-33,-40,-36,41,-38,-35,41,41,41,-37,-34,41,-39,]),'FALSE':([18,21,22,25,36,37,38,45,46,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,88,89,90,92,99,102,103,104,105,108,113,114,115,117,119,120,121,122,124,126,127,128,129,130,132,133,],[-14,42,42,-24,42,42,42,-27,-24,42,42,42,42,-51,-52,-53,-54,-55,-56,-57,-62,-63,-64,-65,-66,-67,42,42,-23,-25,-26,42,-32,42,-31,42,42,42,-30,42,42,42,-33,-40,-36,42,-38,-35,42,42,42,-37,-34,42,-39,]),'RSB':([32,33,34,35,39,40,41,42,71,72,76,80,82,83,84,85,86,98,100,],[-28,53,-45,-44,-58,-59,-60,-61,-49,-50,97,-48,100,-42,-43,-41,-47,-46,-29,]),'OR':([32,33,34,35,39,40,41,42,43,70,71,72,80,81,82,83,84,85,86,91,98,100,101,107,109,110,111,118,123,131,],[-28,56,-45,-44,-58,-59,-60,-61,56,56,-49,-50,-48,56,56,-42,-43,56,-47,56,-46,-29,56,56,56,56,56,56,56,56,]),'AND':([32,33,34,35,39,40,41,42,43,70,71,72,80,81,82,83,84,85,86,91,98,100,101,107,109,110,111,118,123,131,],[-28,57,-45,-44,-58,-59,-60,-61,57,57,-49,-50,-48,57,57,-42,-43,57,-47,57,-46,-29,57,57,57,57,57,57,57,57,]),'SUM':([32,33,34,35,39,40,41,42,43,70,71,72,80,81,82,83,84,85,86,91,98,100,101,107,109,110,111,118,123,131,],[-28,58,-45,-44,-58,-59,-60,-61,58,58,-49,-50,-48,58,58,-42,58,58,-47,58,-46,-29,58,58,58,58,58,58,58,58,]),'MUL':([32,33,34,35,39,40,41,42,43,70,71,72,80,81,82,83,84,85,86,91,98,100,101,107,109,110,111,118,123,131,],[-28,60,-45,-44,-58,-59,-60,-61,60,60,60,-50,-48,60,60,-42,60,60,-47,60,-46,-29,60,60,60,60,60,60,60,60,]),'DIV':([32,33,34,35,39,40,41,42,43,70,71,72,80,81,82,83,84,85,86,91,98,100,101,107,109,110,111,118,123,131,],[-28,61,-45,-44,-58,-59,-60,-61,61,61,61,-50,-48,61,61,-42,61,61,-47,61,-46,-29,61,61,61,61,61,61,61,61,]),'MOD':([32,33,34,35,39,40,41,42,43,70,71,72,80,81,82,83,84,85,86,91,98,100,101,107,109,110,111,118,123,131,],[-28,62,-45,-44,-58,-59,-60,-61,62,62,62,-50,-48,62,62,-42,62,62,-47,62,-46,-29,62,62,62,62,62,62,62,62,]),'GT':([32,33,34,35,39,40,41,42,43,70,71,72,80,81,82,83,84,85,86,91,98,100,101,107,109,110,111,118,123,131,],[-28,63,-45,-44,-58,-59,-60,-61,63,63,-49,-50,-48,63,63,-42,-43,63,-47,63,-46,-29,63,63,63,63,63,63,63,63,]),'LT':([32,33,34,35,39,40,41,42,43,70,71,72,80,81,82,83,84,85,86,91,98,100,101,107,109,110,111,118,123,131,],[-28,64,-45,-44,-58,-59,-60,-61,64,64,-49,-50,-48,64,64,-42,-43,64,-47,64,-46,-29,64,64,64,64,64,64,64,64,]),'NE':([32,33,34,35,39,40,41,42,43,70,71,72,80,81,82,83,84,85,86,91,98,100,101,107,109,110,111,118,123,131,],[-28,65,-45,-44,-58,-59,-60,-61,65,65,-49,-50,-48,65,65,-42,-43,65,-47,65,-46,-29,65,65,65,65,65,65,65,65,]),'EQ':([32,33,34,35,39,40,41,42,43,70,71,72,80,81,82,83,84,85,86,91,98,100,101,107,109,110,111,118,123,131,],[-28,66,-45,-44,-58,-59,-60,-61,66,66,-49,-50,-48,66,66,-42,-43,66,-47,66,-46,-29,66,66,66,66,66,66,66,66,]),'GE':([32,33,34,35,39,40,41,42,43,70,71,72,80,81,82,83,84,85,86,91,98,100,101,107,109,110,111,118,123,131,],[-28,67,-45,-44,-58,-59,-60,-61,67,67,-49,-50,-48,67,67,-42,-43,67,-47,67,-46,-29,67,67,67,67,67,67,67,67,]),'LE':([32,33,34,35,39,40,41,42,43,70,71,72,80,81,82,83,84,85,86,91,98,100,101,107,109,110,111,118,123,131,],[-28,68,-45,-44,-58,-59,-60,-61,68,68,-49,-50,-48,68,68,-42,-43,68,-47,68,-46,-29,68,68,68,68,68,68,68,68,]),'ELIF':([88,92,102,108,117,119,120,122,124,129,130,133,],[-25,-32,-31,-30,-33,-40,-36,125,-35,-37,-34,-39,]),'ELSE':([88,92,102,108,117,119,120,122,124,129,130,133,],[-25,-32,-31,-30,-33,-40,-36,126,-35,-37,-34,-39,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declist':([0,],[2,]),'dec':([2,],[4,]),'vardec':([2,25,46,],[5,46,46,]),'funcdec':([2,],[6,]),'type':([2,20,23,25,46,50,],[7,28,28,47,47,28,]),'idlist':([7,47,],[13,13,]),'iddec':([7,19,47,],[15,26,15,]),'block':([17,49,73,74,113,115,126,127,132,],[24,77,87,92,92,92,92,92,92,]),'paramdecs':([20,23,],[29,44,]),'paramdecslist':([20,23,],[30,30,]),'paramdec':([20,23,50,],[31,31,78,]),'exp':([21,22,36,37,38,51,52,54,55,69,74,90,99,103,104,105,113,114,115,121,126,127,128,132,],[33,43,70,71,72,81,82,83,84,85,91,101,107,109,110,111,91,118,91,123,91,91,131,91,]),'lvalue':([21,22,36,37,38,51,52,54,55,69,74,90,99,103,104,105,113,114,115,121,126,127,128,132,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'const':([21,22,36,37,38,51,52,54,55,69,74,90,99,103,104,105,113,114,115,121,126,127,128,132,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'varlist':([25,46,],[45,75,]),'operator':([33,43,70,71,72,81,82,83,84,85,91,101,107,109,110,111,118,123,131,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'relop':([33,43,70,71,72,81,82,83,84,85,91,101,107,109,110,111,118,123,131,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'stmtlist':([45,],[74,]),'explist':([51,],[79,]),'stmt':([74,113,115,126,127,132,],[89,117,119,129,130,133,]),'elseiflist':([119,],[122,]),'other':([122,],[124,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declist MAIN LRB RRB block','program',5,'p_program','Parser.py',12),
  ('declist -> declist dec','declist',2,'p_declist','Parser.py',20),
  ('declist -> <empty>','declist',0,'p_declist_Landa','Parser.py',28),
  ('dec -> vardec','dec',1,'p_dec','Parser.py',36),
  ('dec -> funcdec','dec',1,'p_dec_funcdec','Parser.py',44),
  ('type -> INTEGER','type',1,'p_type_INTEGER','Parser.py',52),
  ('type -> FLOAT','type',1,'p_type_Float','Parser.py',60),
  ('type -> BOOLEAN','type',1,'p_type_BOOLEAN','Parser.py',68),
  ('iddec -> ID','iddec',1,'p_iddec','Parser.py',76),
  ('iddec -> ID LSB exp RSB','iddec',4,'p_iddec_LSB','Parser.py',84),
  ('iddec -> ID ASSIGN exp','iddec',3,'p_iddec_ASSIGN','Parser.py',92),
  ('idlist -> iddec','idlist',1,'p_idlist','Parser.py',100),
  ('idlist -> idlist COMMA iddec','idlist',3,'p_idlist_idlist','Parser.py',108),
  ('vardec -> type idlist SEMICOLON','vardec',3,'p_vardec','Parser.py',116),
  ('funcdec -> type ID LRB paramdecs RRB block','funcdec',6,'p_funcdec','Parser.py',125),
  ('funcdec -> VOID ID LRB paramdecs RRB block','funcdec',6,'p_funcdec_VOID','Parser.py',133),
  ('paramdecs -> paramdecslist','paramdecs',1,'p_paramdecs','Parser.py',141),
  ('paramdecs -> <empty>','paramdecs',0,'p_paramdecs_Landa','Parser.py',149),
  ('paramdecslist -> paramdec','paramdecslist',1,'p_paramdecslist','Parser.py',157),
  ('paramdecslist -> paramdecslist COMMA paramdec','paramdecslist',3,'p_paramdecslist_COMMA','Parser.py',165),
  ('paramdec -> type ID','paramdec',2,'p_paramdec','Parser.py',173),
  ('paramdec -> type ID LSB RSB','paramdec',4,'p_paramdec_type','Parser.py',181),
  ('varlist -> vardec varlist','varlist',2,'p_varlist','Parser.py',189),
  ('varlist -> <empty>','varlist',0,'p_varlist_Landa','Parser.py',197),
  ('block -> LCB varlist stmtlist RCB','block',4,'p_block','Parser.py',205),
  ('stmtlist -> stmtlist stmt','stmtlist',2,'p_stmtlist','Parser.py',213),
  ('stmtlist -> <empty>','stmtlist',0,'p_stmtlist_Landa','Parser.py',221),
  ('lvalue -> ID','lvalue',1,'p_lvalue','Parser.py',229),
  ('lvalue -> ID LSB exp RSB','lvalue',4,'p_lvalue_ID','Parser.py',237),
  ('stmt -> RETURN exp SEMICOLON','stmt',3,'p_stmt_RETURN','Parser.py',245),
  ('stmt -> exp SEMICOLON','stmt',2,'p_stmt_exp','Parser.py',253),
  ('stmt -> block','stmt',1,'p_stmt_block','Parser.py',261),
  ('stmt -> WHILE LRB exp RRB stmt','stmt',5,'p_stmt_WHILE','Parser.py',269),
  ('stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt','stmt',9,'p_stmt_FOR','Parser.py',277),
  ('stmt -> IF LRB exp RRB stmt elseiflist other','stmt',7,'p_stmt_IF','Parser.py',285),
  ('stmt -> PRINT LRB ID RRB SEMICOLON','stmt',5,'p_stmt_PRINT','Parser.py',293),
  ('other -> ELSE stmt','other',2,'p_other','Parser.py',301),
  ('other -> <empty>','other',0,'p_other_Landa','Parser.py',309),
  ('elseiflist -> elseiflist ELIF LRB exp RRB stmt','elseiflist',6,'p_elseiflist','Parser.py',317),
  ('elseiflist -> <empty>','elseiflist',0,'p_elseiflist_Landa','Parser.py',325),
  ('exp -> lvalue ASSIGN exp','exp',3,'p_exp_lvalue','Parser.py',333),
  ('exp -> exp operator exp','exp',3,'p_exp_operator','Parser.py',341),
  ('exp -> exp relop exp','exp',3,'p_exp_relop','Parser.py',349),
  ('exp -> const','exp',1,'p_exp_const','Parser.py',357),
  ('exp -> lvalue','exp',1,'p_exp_lval','Parser.py',365),
  ('exp -> ID LRB explist RRB','exp',4,'p_exp_ID','Parser.py',373),
  ('exp -> LRB exp RRB','exp',3,'p_exp_LRB','Parser.py',381),
  ('exp -> ID LRB RRB','exp',3,'p_exp_ID_LRB','Parser.py',389),
  ('exp -> SUB exp','exp',2,'p_exp_SUB','Parser.py',397),
  ('exp -> NOT exp','exp',2,'p_exp_NOT','Parser.py',405),
  ('operator -> OR','operator',1,'p_operator_OR','Parser.py',413),
  ('operator -> AND','operator',1,'p_operator_AND','Parser.py',421),
  ('operator -> SUM','operator',1,'p_operator_SUM','Parser.py',429),
  ('operator -> SUB','operator',1,'p_operator_SUB','Parser.py',436),
  ('operator -> MUL','operator',1,'p_operator_MUL','Parser.py',444),
  ('operator -> DIV','operator',1,'p_operator_DIV','Parser.py',452),
  ('operator -> MOD','operator',1,'p_operator_MOD','Parser.py',460),
  ('const -> INTEGERNUMBER','const',1,'p_const_INT','Parser.py',468),
  ('const -> FLOATNUMBER','const',1,'p_const_FLOAT','Parser.py',476),
  ('const -> TRUE','const',1,'p_const_TRUE','Parser.py',484),
  ('const -> FALSE','const',1,'p_const_FALSE','Parser.py',492),
  ('relop -> GT','relop',1,'p_relop_GT','Parser.py',500),
  ('relop -> LT','relop',1,'p_relop_LT','Parser.py',508),
  ('relop -> NE','relop',1,'p_relop_NE','Parser.py',516),
  ('relop -> EQ','relop',1,'p_relop_EQ','Parser.py',524),
  ('relop -> GE','relop',1,'p_relop_GE','Parser.py',532),
  ('relop -> LE','relop',1,'p_relop_LE','Parser.py',540),
  ('explist -> exp','explist',1,'p_explist','Parser.py',548),
  ('explist -> explist COMMA exp','explist',3,'p_explist_COMMA','Parser.py',556),
]
